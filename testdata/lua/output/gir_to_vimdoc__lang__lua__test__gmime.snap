---
source: src/lang/lua.rs
expression: string
---
---@diagnostic disable: unused-local, duplicate-doc-field
---@meta
-- THIS FILE WAS GENERATED BY gir-to-stub! DO NOT MODIFY!
local GMime = {}

--- @class GMime.ApplicationPkcs7Mime : GMime.Part
--- @field parent_object GMime.Part
--- @field smime_type GMime.SecureMimeType
--- @overload fun({type: GMime.SecureMimeType}):GMime.ApplicationPkcs7Mime
local ApplicationPkcs7Mime = {}
--- @class GMime.AutocryptHeader : GObject.Object
--- @field parent_object GObject.Object
--- @field address GMime.InternetAddressMailbox
--- @field prefer_encrypt GMime.AutocryptPreferEncrypt
--- @field keydata GLib.Bytes
--- @field effective_date GLib.DateTime
--- @overload fun():GMime.AutocryptHeader
local AutocryptHeader = {}
--- @class GMime.AutocryptHeaderList : GObject.Object
--- @field parent_object GObject.Object
--- @overload fun():GMime.AutocryptHeaderList
local AutocryptHeaderList = {}
--- @class GMime.Certificate : GObject.Object
--- @field parent_object GObject.Object
--- @field pubkey_algo GMime.PubKeyAlgo
--- @field digest_algo GMime.DigestAlgo
--- @field trust GMime.Trust
--- @field issuer_serial string
--- @field issuer_name string
--- @field fingerprint string
--- @field created number
--- @field expires number
--- @field keyid string
--- @field email string
--- @field name string
--- @field user_id string
--- @field id_validity GMime.Validity
--- @overload fun():GMime.Certificate
local Certificate = {}
--- @class GMime.CertificateList : GObject.Object
--- @field parent_object GObject.Object
--- @field array any[]
--- @overload fun():GMime.CertificateList
local CertificateList = {}
--- @class GMime.ContentDisposition : GObject.Object
--- @field parent_object GObject.Object
--- @field disposition string
--- @field params GMime.ParamList
--- @overload fun():GMime.ContentDisposition
local ContentDisposition = {}
--- @class GMime.ContentType : GObject.Object
--- @field parent_object GObject.Object
--- @field type string
--- @field subtype string
--- @field params GMime.ParamList
--- @overload fun({type: string, subtype: string}):GMime.ContentType
local ContentType = {}
--- @class GMime.CryptoContext : GObject.Object
--- @field parent_object GObject.Object
--- @field request_passwd GMime.PasswordRequestFunc
--- @overload fun({protocol: string}):GMime.CryptoContext
local CryptoContext = {}
--- @class GMime.DataWrapper : GObject.Object
--- @field parent_object GObject.Object
--- @field encoding GMime.ContentEncoding
--- @field stream GMime.Stream
--- @overload fun():GMime.DataWrapper
local DataWrapper = {}
--- @class GMime.DecryptResult : GObject.Object
--- @field parent_object GObject.Object
--- @field recipients GMime.CertificateList
--- @field signatures GMime.SignatureList
--- @field cipher GMime.CipherAlgo
--- @field mdc GMime.DigestAlgo
--- @field session_key string
--- @overload fun():GMime.DecryptResult
local DecryptResult = {}
--- @class GMime.Filter : GObject.Object
--- @field parent_object GObject.Object
--- @field priv any
--- @field outreal string
--- @field outbuf string
--- @field outptr string
--- @field outsize number
--- @field outpre number
--- @field backbuf string
--- @field backsize number
--- @field backlen number
local Filter = {}
--- @class GMime.FilterBasic : GMime.Filter
--- @field parent_object GMime.Filter
--- @field encoder GMime.Encoding
--- @overload fun({encoding: GMime.ContentEncoding, encode: boolean}):GMime.Filter
local FilterBasic = {}
--- @class GMime.FilterBest : GMime.Filter
--- @field parent_object GMime.Filter
--- @field flags GMime.FilterBestFlags
--- @field charset GMime.Charset
--- @field count0 number
--- @field count8 number
--- @field total number
--- @field maxline number
--- @field linelen number
--- @field frombuf number[]
--- @field fromlen number
--- @field hadfrom number
--- @field startline number
--- @field midline number
--- @overload fun({flags: GMime.FilterBestFlags}):GMime.Filter
local FilterBest = {}
--- @class GMime.FilterCharset : GMime.Filter
--- @field parent_object GMime.Filter
--- @field from_charset string
--- @field to_charset string
--- @field cd any
--- @overload fun({from_charset: string, to_charset: string}):GMime.Filter
local FilterCharset = {}
--- @class GMime.FilterChecksum : GMime.Filter
--- @field parent_object GMime.Filter
--- @field checksum GLib.Checksum
--- @overload fun({type: GLib.ChecksumType}):GMime.Filter
local FilterChecksum = {}
--- @class GMime.FilterDos2Unix : GMime.Filter
--- @field parent_object GMime.Filter
--- @field ensure_newline boolean
--- @field pc string
--- @overload fun({ensure_newline: boolean}):GMime.Filter
local FilterDos2Unix = {}
--- @class GMime.FilterEnriched : GMime.Filter
--- @field parent_object GMime.Filter
--- @field flags number
--- @field nofill number
--- @overload fun({flags: number}):GMime.Filter
local FilterEnriched = {}
--- @class GMime.FilterFrom : GMime.Filter
--- @field parent_object GMime.Filter
--- @field mode GMime.FilterFromMode
--- @field midline boolean
--- @overload fun({mode: GMime.FilterFromMode}):GMime.Filter
local FilterFrom = {}
--- @class GMime.FilterGZip : GMime.Filter
--- @field parent_object GMime.Filter
--- @field priv any
--- @field mode GMime.FilterGZipMode
--- @field level number
--- @overload fun({mode: GMime.FilterGZipMode, level: number}):GMime.Filter
local FilterGZip = {}
--- @class GMime.FilterHTML : GMime.Filter
--- @field parent_object GMime.Filter
--- @field scanner any
--- @field flags number
--- @field colour number
--- @field column number
--- @field pre_open number
--- @field citation_depth number
--- @overload fun({flags: number, colour: number}):GMime.Filter
local FilterHTML = {}
--- @class GMime.FilterOpenPGP : GMime.Filter
--- @field parent_object GMime.Filter
--- @overload fun():GMime.Filter
local FilterOpenPGP = {}
--- @class GMime.FilterSmtpData : GMime.Filter
--- @field parent_object GMime.Filter
--- @field bol boolean
--- @overload fun():GMime.Filter
local FilterSmtpData = {}
--- @class GMime.FilterStrip : GMime.Filter
--- @field parent_object GMime.Filter
--- @overload fun():GMime.Filter
local FilterStrip = {}
--- @class GMime.FilterUnix2Dos : GMime.Filter
--- @field parent_object GMime.Filter
--- @field ensure_newline boolean
--- @field pc string
--- @overload fun({ensure_newline: boolean}):GMime.Filter
local FilterUnix2Dos = {}
--- @class GMime.FilterWindows : GMime.Filter
--- @field parent_object GMime.Filter
--- @field is_windows boolean
--- @field claimed_charset string
--- @overload fun({claimed_charset: string}):GMime.Filter
local FilterWindows = {}
--- @class GMime.FilterYenc : GMime.Filter
--- @field parent_object GMime.Filter
--- @field encode boolean
--- @field part number
--- @field state number
--- @field pcrc number
--- @field crc number
--- @overload fun({encode: boolean}):GMime.Filter
local FilterYenc = {}
--- @class GMime.GpgContext : GMime.CryptoContext
--- @overload fun():GMime.CryptoContext
local GpgContext = {}
--- @class GMime.Header : GObject.Object
local Header = {}
--- @class GMime.HeaderList : GObject.Object
--- @field parent_object GObject.Object
--- @overload fun({options: GMime.ParserOptions}):GMime.HeaderList
local HeaderList = {}
--- @class GMime.InternetAddress : GObject.Object
--- @field parent_object GObject.Object
--- @field charset string
--- @field name string
local InternetAddress = {}
--- @class GMime.InternetAddressGroup : GMime.InternetAddress
--- @field parent_object GMime.InternetAddress
--- @field members GMime.InternetAddressList
--- @overload fun({name: string}):GMime.InternetAddress
local InternetAddressGroup = {}
--- @class GMime.InternetAddressList : GObject.Object
--- @field parent_object GObject.Object
--- @field array any[]
--- @overload fun():GMime.InternetAddressList
local InternetAddressList = {}
--- @class GMime.InternetAddressMailbox : GMime.InternetAddress
--- @field parent_object GMime.InternetAddress
--- @field idn_addr string
--- @field addr string
--- @field at number
--- @overload fun({name: string, addr: string}):GMime.InternetAddress
local InternetAddressMailbox = {}
--- @class GMime.Message : GMime.Object
--- @field parent_object GMime.Object
--- @field addrlists GMime.InternetAddressList
--- @field mime_part GMime.Object
--- @field message_id string
--- @field date GLib.DateTime
--- @field subject string
--- @overload fun({pretty_headers: boolean}):GMime.Message
local Message = {}
--- @class GMime.MessagePart : GMime.Object
--- @field parent_object GMime.Object
--- @field message GMime.Message
--- @overload fun({subtype: string}):GMime.MessagePart
local MessagePart = {}
--- @class GMime.MessagePartial : GMime.Part
--- @field parent_object GMime.Part
--- @field number number
--- @field total number
--- @field id string
--- @overload fun({id: string, number: number, total: number}):GMime.MessagePartial
local MessagePartial = {}
--- @class GMime.Multipart : GMime.Object
--- @field parent_object GMime.Object
--- @field children any[]
--- @field boundary string
--- @field prologue string
--- @field epilogue string
--- @overload fun():GMime.Multipart
local Multipart = {}
--- @class GMime.MultipartEncrypted : GMime.Multipart
--- @field parent_object GMime.Multipart
--- @overload fun():GMime.MultipartEncrypted
local MultipartEncrypted = {}
--- @class GMime.MultipartSigned : GMime.Multipart
--- @field parent_object GMime.Multipart
--- @overload fun():GMime.MultipartSigned
local MultipartSigned = {}
--- @class GMime.Object : GObject.Object
--- @field parent_object GObject.Object
--- @field disposition GMime.ContentDisposition
--- @field content_type GMime.ContentType
--- @field headers GMime.HeaderList
--- @field content_id string
--- @overload fun({options: GMime.ParserOptions, content_type: GMime.ContentType}):GMime.Object
local Object = {}
--- @class GMime.Param : GObject.Object
--- @field parent_object GObject.Object
--- @field method GMime.ParamEncodingMethod
--- @field charset string
--- @field lang string
--- @field name string
--- @field value string
local Param = {}
--- @class GMime.ParamList : GObject.Object
--- @overload fun():GMime.ParamList
local ParamList = {}
--- @class GMime.Parser : GObject.Object
--- @field parent_object GObject.Object
--- @field priv any
--- @overload fun():GMime.Parser
local Parser = {}
--- @class GMime.Part : GMime.Object
--- @field parent_object GMime.Object
--- @field encoding GMime.ContentEncoding
--- @field openpgp GMime.OpenPGPData
--- @field content_description string
--- @field content_location string
--- @field content_md5 string
--- @field content GMime.DataWrapper
--- @overload fun():GMime.Part
local Part = {}
--- @class GMime.Pkcs7Context : GMime.CryptoContext
--- @overload fun():GMime.CryptoContext
local Pkcs7Context = {}
--- @class GMime.Signature : GObject.Object
--- @field parent_object GObject.Object
--- @field status GMime.SignatureStatus
--- @field cert GMime.Certificate
--- @field created number
--- @field expires number
--- @overload fun():GMime.Signature
local Signature = {}
--- @class GMime.SignatureList : GObject.Object
--- @field parent_object GObject.Object
--- @overload fun():GMime.SignatureList
local SignatureList = {}
--- @class GMime.Stream : GObject.Object
local Stream = {}
--- @class GMime.StreamBuffer : GMime.Stream
--- @field parent_object GMime.Stream
--- @field mode GMime.StreamBufferMode
--- @field source GMime.Stream
--- @field buffer string
--- @field bufptr string
--- @field bufend string
--- @field buflen number
--- @overload fun({source: GMime.Stream, mode: GMime.StreamBufferMode}):GMime.Stream
local StreamBuffer = {}
--- @class GMime.StreamCat : GMime.Stream
--- @field parent_object GMime.Stream
--- @field sources any
--- @field current any
--- @overload fun():GMime.Stream
local StreamCat = {}
--- @class GMime.StreamFile : GMime.Stream
--- @field parent_object GMime.Stream
--- @field owner boolean
--- @field fp any
--- @overload fun({fp: any}):GMime.Stream
local StreamFile = {}
--- @class GMime.StreamFilter : GMime.Stream
--- @field parent_object GMime.Stream
--- @field priv any
--- @field source GMime.Stream
--- @field owner boolean
--- @overload fun({stream: GMime.Stream}):GMime.Stream
local StreamFilter = {}
--- @class GMime.StreamFs : GMime.Stream
--- @field parent_object GMime.Stream
--- @field owner boolean
--- @field eos boolean
--- @field fd number
--- @overload fun({fd: number}):GMime.Stream
local StreamFs = {}
--- @class GMime.StreamGIO : GMime.Stream
--- @field parent_object GMime.Stream
--- @field ostream Gio.OutputStream
--- @field istream Gio.InputStream
--- @field file Gio.File
--- @field owner boolean
--- @field eos boolean
--- @overload fun({file: Gio.File}):GMime.Stream
local StreamGIO = {}
--- @class GMime.StreamMem : GMime.Stream
--- @field parent_object GMime.Stream
--- @field buffer number[]
--- @field owner boolean
--- @overload fun():GMime.Stream
local StreamMem = {}
--- @class GMime.StreamMmap : GMime.Stream
--- @field parent_object GMime.Stream
--- @field owner boolean
--- @field eos boolean
--- @field fd number
--- @field map string
--- @field maplen number
--- @overload fun({fd: number, prot: number, flags: number}):GMime.Stream
local StreamMmap = {}
--- @class GMime.StreamNull : GMime.Stream
--- @field parent_object GMime.Stream
--- @field written number
--- @field newlines number
--- @field count_newlines boolean
--- @overload fun():GMime.Stream
local StreamNull = {}
--- @class GMime.StreamPipe : GMime.Stream
--- @field parent_object GMime.Stream
--- @field owner boolean
--- @field eos boolean
--- @field fd number
--- @overload fun({fd: number}):GMime.Stream
local StreamPipe = {}
--- @class GMime.TextPart : GMime.Part
--- @field parent_object GMime.Part
--- @overload fun():GMime.TextPart
local TextPart = {}
--- @class GMime.Charset
--- @field mask number
--- @field level number
local Charset = {}
--- @class GMime.Encoding
--- @field encoding GMime.ContentEncoding
--- @field uubuf number[]
--- @field encode boolean
--- @field save number
--- @field state number
local Encoding = {}
--- @class GMime.FormatOptions
local FormatOptions = {}
--- @class GMime.OpenPGPMarker
--- @field marker string
--- @field len number
--- @field before GMime.OpenPGPState
--- @field after GMime.OpenPGPState
--- @field is_end_marker boolean
local OpenPGPMarker = {}
--- @class GMime.ParserOptions
local ParserOptions = {}
--- @class GMime.PartIter
local PartIter = {}
--- @class GMime.References
--- @field array any[]
local References = {}
--- @class GMime.StreamIOVector
--- @field data any
--- @field len number
local StreamIOVector = {}
--- @alias GMime.HeaderRawValueFormatter fun(header: GMime.Header, options: GMime.FormatOptions, value: string, charset: string):string
--- @alias GMime.ObjectForeachFunc fun(parent: GMime.Object, part: GMime.Object, user_data: any):nil
--- @alias GMime.ParserHeaderRegexFunc fun(parser: GMime.Parser, header: string, value: string, offset: number, user_data: any):nil
--- @alias GMime.ParserWarningFunc fun(offset: number, errcode: GMime.ParserWarning, item: string, user_data: any):nil
--- @alias GMime.PasswordRequestFunc fun(ctx: GMime.CryptoContext, user_id: string, prompt: string, reprompt: boolean, response: GMime.Stream):boolean
--- @enum GMime.AddressType
GMime.AddressType = {
	["SENDER"] = 0,
	["FROM"] = 1,
	["REPLY_TO"] = 2,
	["TO"] = 3,
	["CC"] = 4,
	["BCC"] = 5,
}
--- @enum GMime.AutocryptPreferEncrypt
GMime.AutocryptPreferEncrypt = {
	["NONE"] = 0,
	["MUTUAL"] = 1,
}
--- @enum GMime.CipherAlgo
GMime.CipherAlgo = {
	["DEFAULT"] = 0,
	["IDEA"] = 1,
	["3DES"] = 2,
	["CAST5"] = 3,
	["BLOWFISH"] = 4,
	["AES"] = 7,
	["AES192"] = 8,
	["AES256"] = 9,
	["TWOFISH"] = 10,
	["CAMELLIA128"] = 11,
	["CAMELLIA192"] = 12,
	["CAMELLIA256"] = 13,
}
--- @enum GMime.ContentEncoding
GMime.ContentEncoding = {
	["DEFAULT"] = 0,
	["7BIT"] = 1,
	["8BIT"] = 2,
	["BINARY"] = 3,
	["BASE64"] = 4,
	["QUOTEDPRINTABLE"] = 5,
	["UUENCODE"] = 6,
}
--- @enum GMime.DigestAlgo
GMime.DigestAlgo = {
	["DEFAULT"] = 0,
	["MD5"] = 1,
	["SHA1"] = 2,
	["RIPEMD160"] = 3,
	["MD2"] = 5,
	["TIGER192"] = 6,
	["HAVAL5160"] = 7,
	["SHA256"] = 8,
	["SHA384"] = 9,
	["SHA512"] = 10,
	["SHA224"] = 11,
	["MD4"] = 301,
	["CRC32"] = 302,
	["CRC32_RFC1510"] = 303,
	["CRC32_RFC2440"] = 304,
}
--- @enum GMime.EncodingConstraint
GMime.EncodingConstraint = {
	["7BIT"] = 0,
	["8BIT"] = 1,
	["BINARY"] = 2,
}
--- @enum GMime.EncryptFlags
GMime.EncryptFlags = {
	["NONE"] = 0,
	["ALWAYS_TRUST"] = 1,
	["NO_COMPRESS"] = 16,
	["SYMMETRIC"] = 32,
	["THROW_KEYIDS"] = 64,
}
--- @enum GMime.FilterFromMode
GMime.FilterFromMode = {
	["DEFAULT"] = 0,
	["ESCAPE"] = 0,
	["ARMOR"] = 1,
}
--- @enum GMime.FilterGZipMode
GMime.FilterGZipMode = {
	["ZIP"] = 0,
	["UNZIP"] = 1,
}
--- @enum GMime.Format
GMime.Format = {
	["MESSAGE"] = 0,
	["MBOX"] = 1,
	["MMDF"] = 2,
}
--- @enum GMime.NewLineFormat
GMime.NewLineFormat = {
	["UNIX"] = 0,
	["DOS"] = 1,
}
--- @enum GMime.OpenPGPData
GMime.OpenPGPData = {
	["NONE"] = 0,
	["ENCRYPTED"] = 1,
	["SIGNED"] = 2,
	["PUBLIC_KEY"] = 3,
	["PRIVATE_KEY"] = 4,
}
--- @enum GMime.ParamEncodingMethod
GMime.ParamEncodingMethod = {
	["DEFAULT"] = 0,
	["RFC2231"] = 1,
	["RFC2047"] = 2,
}
--- @enum GMime.ParserWarning
GMime.ParserWarning = {
	["WARN_DUPLICATED_HEADER"] = 1,
	["WARN_DUPLICATED_PARAMETER"] = 2,
	["WARN_UNENCODED_8BIT_HEADER"] = 3,
	["WARN_INVALID_CONTENT_TYPE"] = 4,
	["WARN_INVALID_RFC2047_HEADER_VALUE"] = 5,
	["WARN_MALFORMED_MULTIPART"] = 6,
	["WARN_TRUNCATED_MESSAGE"] = 7,
	["WARN_MALFORMED_MESSAGE"] = 8,
	["CRIT_INVALID_HEADER_NAME"] = 9,
	["CRIT_CONFLICTING_HEADER"] = 10,
	["CRIT_CONFLICTING_PARAMETER"] = 11,
	["CRIT_MULTIPART_WITHOUT_BOUNDARY"] = 12,
	["WARN_INVALID_PARAMETER"] = 13,
	["WARN_INVALID_ADDRESS_LIST"] = 14,
	["CRIT_NESTING_OVERFLOW"] = 15,
	["WARN_PART_WITHOUT_CONTENT"] = 16,
	["CRIT_PART_WITHOUT_HEADERS_OR_CONTENT"] = 17,
}
--- @enum GMime.PubKeyAlgo
GMime.PubKeyAlgo = {
	["DEFAULT"] = 0,
	["RSA"] = 1,
	["RSA_E"] = 2,
	["RSA_S"] = 3,
	["ELG_E"] = 16,
	["DSA"] = 17,
	["ECC"] = 18,
	["ELG"] = 20,
	["ECDSA"] = 301,
	["ECDH"] = 302,
	["EDDSA"] = 303,
}
--- @enum GMime.RfcComplianceMode
GMime.RfcComplianceMode = {
	["LOOSE"] = 0,
	["STRICT"] = 1,
}
--- @enum GMime.SecureMimeType
GMime.SecureMimeType = {
	["COMPRESSED_DATA"] = 0,
	["ENVELOPED_DATA"] = 1,
	["SIGNED_DATA"] = 2,
	["CERTS_ONLY"] = 3,
	["UNKNOWN"] = 4,
}
--- @enum GMime.SeekWhence
GMime.SeekWhence = {
	["SET"] = 0,
	["CUR"] = 1,
	["END"] = 2,
}
--- @enum GMime.SignatureStatus
GMime.SignatureStatus = {
	["VALID"] = 1,
	["GREEN"] = 2,
	["RED"] = 4,
	["KEY_REVOKED"] = 16,
	["KEY_EXPIRED"] = 32,
	["SIG_EXPIRED"] = 64,
	["KEY_MISSING"] = 128,
	["CRL_MISSING"] = 256,
	["CRL_TOO_OLD"] = 512,
	["BAD_POLICY"] = 1024,
	["SYS_ERROR"] = 2048,
	["TOFU_CONFLICT"] = 4096,
}
--- @enum GMime.StreamBufferMode
GMime.StreamBufferMode = {
	["READ"] = 0,
	["WRITE"] = 1,
}
--- @enum GMime.Trust
GMime.Trust = {
	["UNKNOWN"] = 0,
	["UNDEFINED"] = 1,
	["NEVER"] = 2,
	["MARGINAL"] = 3,
	["FULL"] = 4,
	["ULTIMATE"] = 5,
}
--- @enum GMime.Validity
GMime.Validity = {
	["UNKNOWN"] = 0,
	["UNDEFINED"] = 1,
	["NEVER"] = 2,
	["MARGINAL"] = 3,
	["FULL"] = 4,
	["ULTIMATE"] = 5,
}
--- @enum GMime.DecryptFlags
--- @overload fun({any}): GMime.DecryptFlags
GMime.DecryptFlags = {
	["NONE"] = 0,
	["EXPORT_SESSION_KEY"] = 1,
	["NO_VERIFY"] = 2,
	["ENABLE_KEYSERVER_LOOKUPS"] = 32768,
	["ENABLE_ONLINE_CERTIFICATE_CHECKS"] = 32768,
}
--- @enum GMime.FilterBestFlags
--- @overload fun({any}): GMime.FilterBestFlags
GMime.FilterBestFlags = {
	["CHARSET"] = 1,
	["ENCODING"] = 2,
}
--- @enum GMime.OpenPGPState
--- @overload fun({any}): GMime.OpenPGPState
GMime.OpenPGPState = {
	["NONE"] = 0,
	["BEGIN_PGP_MESSAGE"] = 1,
	["END_PGP_MESSAGE"] = 3,
	["BEGIN_PGP_SIGNED_MESSAGE"] = 4,
	["BEGIN_PGP_SIGNATURE"] = 12,
	["END_PGP_SIGNATURE"] = 28,
	["BEGIN_PGP_PUBLIC_KEY_BLOCK"] = 32,
	["END_PGP_PUBLIC_KEY_BLOCK"] = 96,
	["BEGIN_PGP_PRIVATE_KEY_BLOCK"] = 128,
	["END_PGP_PRIVATE_KEY_BLOCK"] = 384,
}
--- @enum GMime.VerifyFlags
--- @overload fun({any}): GMime.VerifyFlags
GMime.VerifyFlags = {
	["NONE"] = 0,
	["ENABLE_KEYSERVER_LOOKUPS"] = 32768,
	["ENABLE_ONLINE_CERTIFICATE_CHECKS"] = 32768,
}
--- Computes the best charset to use to encode this text buffer.
--- @param inbuf string a UTF-8 text buffer
--- @param inlen number input buffer length
--- @return string|nil
function GMime.charset_best(inbuf, inlen) end

--- Attempts to find a canonical charset name for @charset.
--- 
--- Note: Will normally return the same value as
--- g_mime_charset_iconv_name() unless the system iconv does not use
--- the canonical ISO charset names (such as using ISO8859-1 rather
--- than the canonical form ISO-8859-1).
--- @param charset string charset name
--- @return string
function GMime.charset_canon_name(charset) end

--- Attempts to find an iconv-friendly charset name for @charset.
--- @param charset string charset name
--- @return string
function GMime.charset_iconv_name(charset) end

--- Maps the ISO-8859-# charset to the equivalent Windows-CP125#
--- charset.
--- @param isocharset string ISO-8859-# charset
--- @return string
function GMime.charset_iso_to_windows(isocharset) end

--- Attempts to find a specific language code that is specific to
--- @charset. Currently only handles CJK and Russian/Ukranian
--- charset->lang mapping. Everything else will return nil.
--- @param charset string charset name
--- @return string|nil
function GMime.charset_language(charset) end

--- Gets the user's locale charset (or iso-8859-1 by default).
--- 
--- Note: This function is deprecated. Use g_mime_locale_charset()
--- instead.
--- @return string
function GMime.charset_locale_name() end

--- Initializes character set maps.
--- 
--- Note: g_mime_init() calls this routine for you.
function GMime.charset_map_init() end

--- Frees internal lookup tables created in g_mime_charset_map_init().
function GMime.charset_map_shutdown() end

--- Attempts to find an iconv-friendly charset name for @charset.
--- 
--- Note: This function is deprecated. Use g_mime_charset_iconv_name()
--- instead.
--- @param charset string charset name
--- @return string
function GMime.charset_name(charset) end

--- Checks that the GMime library version meets the requirements of the
--- required version.
--- @param major number Minimum major version
--- @param minor number Minimum minor version
--- @param micro number Minimum micro version
--- @return boolean
function GMime.check_version(major, minor, micro) end

--- Gets the appropriate #GMimeContentEncoding enumeration value based
--- on the input string.
--- @param str string a string representing a Content-Transfer-Encoding value
--- @return GMime.ContentEncoding
function GMime.content_encoding_from_string(str) end

--- Gets the string value of the content encoding.
--- @param encoding GMime.ContentEncoding a #GMimeContentEncoding
--- @return string
function GMime.content_encoding_to_string(encoding) end

--- Decodes a chunk of base64 encoded data.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been decoded
--- @return number
function GMime.encoding_base64_decode_step(inbuf, inlen, outbuf, state, save) end

--- Base64 encodes the input stream to the output stream. Call this
--- when finished encoding data with g_mime_encoding_base64_encode_step()
--- to flush off the last little bit.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.encoding_base64_encode_close(inbuf, inlen, outbuf, state, save) end

--- Base64 encodes a chunk of data. Performs an 'encode step', only
--- encodes blocks of 3 characters to the output at a time, saves
--- left-over state in state and save (initialise to 0 on first
--- invocation).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.encoding_base64_encode_step(inbuf, inlen, outbuf, state, save) end

--- Decodes a block of quoted-printable encoded data. Performs a
--- 'decode step' on a chunk of QP encoded data.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been decoded
--- @return number
function GMime.encoding_quoted_decode_step(inbuf, inlen, outbuf, state, save) end

--- Quoted-printable encodes a block of text. Call this when finished
--- encoding data with g_mime_encoding_quoted_encode_step() to flush off
--- the last little bit.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.encoding_quoted_encode_close(inbuf, inlen, outbuf, state, save) end

--- Quoted-printable encodes a block of text. Performs an 'encode
--- step', saves left-over state in state and save (initialise to -1 on
--- first invocation).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.encoding_quoted_encode_step(inbuf, inlen, outbuf, state, save) end

--- Uudecodes a chunk of data. Performs a 'decode step' on a chunk of
--- uuencoded data. Assumes the "begin mode filename" line has
--- been stripped off.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been decoded
--- @return number
function GMime.encoding_uudecode_step(inbuf, inlen, outbuf, state, save) end

--- Uuencodes a chunk of data. Call this when finished encoding data
--- with g_mime_encoding_uuencode_step() to flush off the last little bit.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param uubuf number temporary buffer of 60 bytes
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.encoding_uuencode_close(inbuf, inlen, outbuf, uubuf, state, save) end

--- Uuencodes a chunk of data. Performs an 'encode step', only encodes
--- blocks of 45 characters to the output at a time, saves left-over
--- state in @uubuf, @state and @save (initialize to 0 on first
--- invocation).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output stream
--- @param uubuf number temporary buffer of 60 bytes
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.encoding_uuencode_step(inbuf, inlen, outbuf, uubuf, state, save) end

--- Gets the default format options.
--- @return GMime.FormatOptions
function GMime.format_options_get_default() end

--- Allocates a new string buffer containing @str in UTF-8.
--- @param str string string in locale charset
--- @return string
function GMime.iconv_locale_to_utf8(str) end

--- Allocates a new string buffer containing the first @n bytes of
--- @str converted to UTF-8.
--- @param str string string in locale charset
--- @param n number number of bytes to convert
--- @return string
function GMime.iconv_locale_to_utf8_length(str, n) end

--- Allocates a new string buffer containing @str converted to the
--- user's locale charset.
--- @param str string string in UTF-8 charset
--- @return string
function GMime.iconv_utf8_to_locale(str) end

--- Allocates a new string buffer containing the first @n bytes of
--- @str converted to the user's locale charset.
--- @param str string string in UTF-8 charset
--- @param n number number of bytes to convert
--- @return string
function GMime.iconv_utf8_to_locale_length(str, n) end

--- Initializes GMime.
function GMime.init() end

--- Gets the user's locale charset (or iso-8859-1 by default).
--- @return string
function GMime.locale_charset() end

--- Gets the user's locale language code (or nil by default).
--- @return string|nil
function GMime.locale_language() end

--- Gets the default parser options.
--- @return GMime.ParserOptions
function GMime.parser_options_get_default() end

--- Decodes a list of msg-ids as in the References and/or In-Reply-To
--- headers defined in rfc822.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param text string string containing a list of msg-ids
--- @return GMime.References
function GMime.references_parse(options, text) end

--- Frees internally allocated tables created in g_mime_init().
function GMime.shutdown() end

--- Determines the best content encoding for the first @len bytes of
--- @text.
--- @param text number[] text to encode
--- @param len number text length
--- @return GMime.ContentEncoding
function GMime.utils_best_encoding(text, len) end

--- Attempts to convert text in an unknown 8bit/multibyte charset into
--- UTF-8 by finding the charset which will convert the most bytes into
--- valid UTF-8 characters as possible. If no exact match can be found,
--- it will choose the best match and convert invalid byte sequences
--- into question-marks (?) in the returned string buffer.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param text number[] input text in  unknown 8bit/multibyte character set
--- @param len number input text length
--- @return string
function GMime.utils_decode_8bit(options, text, len) end

--- Decodes a msg-id as defined by rfc822.
--- @param message_id string string containing a message-id
--- @return string
function GMime.utils_decode_message_id(message_id) end

--- Generates a unique Message-Id.
--- @param fqdn string Fully qualified domain name
--- @return string
function GMime.utils_generate_message_id(fqdn) end

--- Parses the rfc822 date string.
--- @param str string input date string
--- @return GLib.DateTime|nil
function GMime.utils_header_decode_date(str) end

--- Decodes an rfc2047 encoded 'phrase' header.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param phrase string header to decode
--- @return string
function GMime.utils_header_decode_phrase(options, phrase) end

--- Decodes an rfc2047 encoded 'text' header.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param text string header text to decode
--- @return string
function GMime.utils_header_decode_text(options, text) end

--- Encodes a 'phrase' header according to the rules in rfc2047.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param phrase string phrase to encode
--- @param charset string? the charset to use or nil to use the default
--- @return string
function GMime.utils_header_encode_phrase(options, phrase, charset) end

--- Encodes a 'text' header according to the rules in rfc2047.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param text string text to encode
--- @param charset string? the charset to use or nil to use the default
--- @return string
function GMime.utils_header_encode_text(options, text, charset) end

--- Allocates a string buffer containing the rfc822 formatted date
--- string represented by @date.
--- @param date GLib.DateTime a #GDateTime
--- @return string
function GMime.utils_header_format_date(date) end

--- Unfolds a raw header value according to the rules in rfc822.
--- @param value string raw header value
--- @return string
function GMime.utils_header_unfold(value) end

--- Quotes @string as needed according to the rules in rfc2822.
--- @param str string input string
--- @return string
function GMime.utils_quote_string(str) end

--- Folds a structured header according to the rules in rfc822.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param format GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param header string header field and value string
--- @return string
function GMime.utils_structured_header_fold(options, format, header) end

--- Determines if @text contains 8bit characters within the first @len
--- bytes.
--- @param text number[] text to check for 8bit chars
--- @param len number text length
--- @return boolean
function GMime.utils_text_is_8bit(text, len) end

--- Unquotes and unescapes a string.
--- @param str string input string
function GMime.utils_unquote_string(str) end

--- Folds an unstructured header according to the rules in rfc822.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param format GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param header string header field and value string
--- @return string
function GMime.utils_unstructured_header_fold(options, format, header) end

--- Performs a 'decode step' on a chunk of yEncoded data of length
--- @inlen pointed to by @inbuf and writes to @outbuf. Assumes the =ybegin
--- and =ypart lines have already been stripped off.
--- 
--- To get the crc32 value of the part, use #GMIME_YENCODE_CRC_FINAL
--- (@pcrc). If there are more parts, you should reuse @crc without
--- re-initializing. Once all parts have been decoded, you may get the
--- combined crc32 value of all the parts using #GMIME_YENCODE_CRC_FINAL
--- (@crc).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number ydecode state
--- @param pcrc number part crc state
--- @param crc number crc state
--- @return number
function GMime.ydecode_step(inbuf, inlen, outbuf, state, pcrc, crc) end

--- Call this function when finished encoding data with
--- g_mime_yencode_step() to flush off the remaining state.
--- 
--- #GMIME_YENCODE_CRC_FINAL (@pcrc) will give you the crc32 of the
--- encoded "part". If there are more "parts" to encode, you should
--- re-use @crc when encoding the next "parts" and then use
--- #GMIME_YENCODE_CRC_FINAL (@crc) to get the combined crc32 value of
--- all the parts.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number yencode state
--- @param pcrc number part crc state
--- @param crc number crc state
--- @return number
function GMime.yencode_close(inbuf, inlen, outbuf, state, pcrc, crc) end

--- Performs an yEncode 'encode step' on a chunk of raw data of length
--- @inlen pointed to by @inbuf and writes to @outbuf.
--- 
--- @state should be initialized to #GMIME_YENCODE_STATE_INIT before
--- beginning making the first call to this function. Subsequent calls
--- should reuse @state.
--- 
--- Along the same lines, @pcrc and @crc should be initialized to
--- #GMIME_YENCODE_CRC_INIT before using.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number yencode state
--- @param pcrc number part crc state
--- @param crc number crc state
--- @return number
function GMime.yencode_step(inbuf, inlen, outbuf, state, pcrc, crc) end

--- Creates a new application/pkcs7-mime object.
--- @param type GMime.SecureMimeType The type of S/MIME data contained within the part.
--- @return GMime.ApplicationPkcs7Mime
function GMime.ApplicationPkcs7Mime.new(type) end

--- Attempts to decrypt the encrypted application/pkcs7-mime part.
--- 
--- When non-nil, @session_key should be a nil-terminated string,
--- such as the one returned by g_mime_decrypt_result_get_session_key()
--- from a previous decryption. If the @session_key is not valid, decryption
--- will fail.
--- 
--- If @result is non-nil, then on a successful decrypt operation, it will be
--- updated to point to a newly-allocated #GMimeDecryptResult with signature
--- status information as well as a list of recipients that the part was
--- encrypted to.
--- @param pkcs7_mime GMime.ApplicationPkcs7Mime a #GMimeApplicationPkcs7Mime
--- @param flags GMime.DecryptFlags a #GMimeDecryptFlags
--- @param session_key string session key to use or nil
--- @param result GMime.DecryptResult the decryption result
--- @return GMime.Object|nil
function ApplicationPkcs7Mime:decrypt(pkcs7_mime, flags, session_key, result) end

--- Gets the smime-type value of the Content-Type header.
--- @param pkcs7_mime GMime.ApplicationPkcs7Mime A #GMimeApplicationPkcs7Mime object
--- @return GMime.SecureMimeType
function ApplicationPkcs7Mime:get_smime_type(pkcs7_mime) end

--- Attempts to verify the signed @pkcs7_mime part and extract the original
--- MIME entity.
--- @param pkcs7_mime GMime.ApplicationPkcs7Mime a #GMimeApplicationPkcs7Mime
--- @param flags GMime.VerifyFlags a #GMimeVerifyFlags
--- @return GMime.SignatureList|nil, GMime.Object
function ApplicationPkcs7Mime:verify(pkcs7_mime, flags) end

--- Attempts to encrypt the @entity MIME part to the public keys of @recipients
--- using S/MIME. If successful, a new application/pkcs7-mime object is returned.
--- @param entity GMime.Object a #GMimeObject to encrypt
--- @param flags GMime.EncryptFlags a #GMimeEncryptFlags
--- @param recipients string[] an array of recipients to encrypt to
--- @return GMime.ApplicationPkcs7Mime|nil
function GMime.ApplicationPkcs7Mime.encrypt(entity, flags, recipients) end

--- Attempts to sign the @entity MIME part with @userid's private key using
--- S/MIME. If successful, a new application/pkcs7-mime object is returned.
--- @param entity GMime.Object a #GMimeObject
--- @param userid string the user id to sign with
--- @return GMime.ApplicationPkcs7Mime|nil
function GMime.ApplicationPkcs7Mime.sign(entity, userid) end

--- @param obj GObject.Object
--- @return boolean
function GMime.ApplicationPkcs7Mime:is_type_of(obj) end
--- Creates a new #GMimeAutocryptHeader object.
--- @return GMime.AutocryptHeader
function GMime.AutocryptHeader.new() end

--- Creates a new #GMimeAutocryptHeader object based on the value of an
--- Autocrypt: header.
--- 
--- Note that this will not have an @effective_date set, since the
--- @effective_date is derived from the Date: line in the same block of
--- e-mail headers, but cannot be extracted from the raw Autocrypt:
--- header itself.
--- @param string string The raw string value of an Autocrypt header
--- @return GMime.AutocryptHeader
function GMime.AutocryptHeader.new_from_string(string) end

--- If address and type already match between @src and @dst, copy
--- keydata, prefer_encrypt, effective_date from @src to @dst.
--- @param dst GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param src GMime.AutocryptHeader a #GMimeAutocryptHeader object
function AutocryptHeader:clone(dst, src) end

--- Compare two Autocrypt Headers.  This is useful for comparison, as well as for
--- sorting headers by:
--- 
---  - address
---  - effective_date
---  - keydata
---  - prefer_encrypt
--- @param ah1 GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param ah2 GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return number
function AutocryptHeader:compare(ah1, ah2) end

--- Gets the internal address of the Autocrypt header, or nil if not set.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return GMime.InternetAddressMailbox
function AutocryptHeader:get_address(ah) end

--- Gets the internal address of the Autocrypt header as a C string, or nil if not set.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return string
function AutocryptHeader:get_address_as_string(ah) end

--- Gets the effective date of the Autocrypt header, or nil if not set.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return GLib.DateTime
function AutocryptHeader:get_effective_date(ah) end

--- Gets the raw keydata of the Autocrypt header, or nil if not set.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return GLib.Bytes
function AutocryptHeader:get_keydata(ah) end

--- Gets the encryption preference stated by the Autocrypt header.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return GMime.AutocryptPreferEncrypt
function AutocryptHeader:get_prefer_encrypt(ah) end

--- When dealing with Autocrypt headers derived from a message, some
--- sender addresses will not have a legitimate/complete header
--- associated with them.  When a given sender address has no complete
--- header of a specific type, it should "reset" the state of the
--- associated address.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @return boolean
function AutocryptHeader:is_complete(ah) end

--- Set the address associated with the autocrypt_header.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param address GMime.InternetAddressMailbox a #InternetAddressMailbox value
function AutocryptHeader:set_address(ah, address) end

--- Set the address associated with the autocrypt_header.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param address string a nil-terminated string that is a raw e-mail address
function AutocryptHeader:set_address_from_string(ah, address) end

--- Set the effective date associated with the Autocrypt header.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param effective_date GLib.DateTime a #GDateTime object
function AutocryptHeader:set_effective_date(ah, effective_date) end

--- Set the raw key data associated with the Autocrypt header.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param keydata GLib.Bytes a #GBytes object
function AutocryptHeader:set_keydata(ah, keydata) end

--- Set the encryption preference associated with the Autocrypt header.
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param pref GMime.AutocryptPreferEncrypt a #GMimeAutocryptPreferEncrypt value
function AutocryptHeader:set_prefer_encrypt(ah, pref) end

--- Gets the string representation of the Autocrypt header, or nil on
--- error.  For example, it might return:
--- 
---     prefer-encrypt=mutual; addr=bob\@example.com; keydata=AAAB15BE...
--- 
--- If you are using this object to populate an Autocrypt-Gossip
--- header, you should set @gossip to %TRUE (this will suppress
--- inclusion of prefer-encrypt).
--- @param ah GMime.AutocryptHeader a #GMimeAutocryptHeader object
--- @param gossip boolean a #gboolean, indicating whether this header is for use with gossip
--- @return string
function AutocryptHeader:to_string(ah, gossip) end

--- @param obj GObject.Object
--- @return boolean
function GMime.AutocryptHeader:is_type_of(obj) end
--- Creates a new #GMimeAutocryptHeaderList object.
--- @return GMime.AutocryptHeaderList
function GMime.AutocryptHeaderList.new() end

--- Adds a the passed #GMimeAutocryptHeader to the list.
--- @param list GMime.AutocryptHeaderList a #GMimeAutocryptHeaderList object
--- @param header GMime.AutocryptHeader a #GMimeAutocryptHeader object
function AutocryptHeaderList:add(list, header) end

--- Adds a new incomplete #GMimeAutocryptHeader object for each
--- InternetAddressMailbox found in #addresses.
--- @param list GMime.AutocryptHeaderList a #GMimeAutocryptHeaderList object
--- @param addresses GMime.InternetAddressList an #InternetAddressList object
--- @return number
function AutocryptHeaderList:add_missing_addresses(list, addresses) end

--- See how many Autocrypt headers are in the list.
--- @param list GMime.AutocryptHeaderList a #GMimeAutocryptHeaderList object
--- @return number
function AutocryptHeaderList:get_count(list) end

--- Get the Nth header in the list (returns nil on error, or if @index is out of bounds)
--- @param list GMime.AutocryptHeaderList a #GMimeAutocryptHeaderList object
--- @param index number an index into the list
--- @return GMime.AutocryptHeader
function AutocryptHeaderList:get_header_at(list, index) end

--- Gets the Autocrypt header corresponding to the given @mailbox.
--- @param list GMime.AutocryptHeaderList a #GMimeAutocryptHeaderList object
--- @param mailbox GMime.InternetAddressMailbox an #InternetAddressMailbox object
--- @return GMime.AutocryptHeader
function AutocryptHeaderList:get_header_for_address(list, mailbox) end

--- Remove all incomplete Autocrypt headers from the list.
--- @param list GMime.AutocryptHeaderList a #GMimeAutocryptHeaderList object
function AutocryptHeaderList:remove_incomplete(list) end

--- @param obj GObject.Object
--- @return boolean
function GMime.AutocryptHeaderList:is_type_of(obj) end
--- Creates a new #GMimeCertificate object.
--- @return GMime.Certificate
function GMime.Certificate.new() end

--- Get the creation date of the certificate's key.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return number
function Certificate:get_created(cert) end

--- Get the creation date of the certificate's key in seconds since the
--- UNIX epoch, represented as a 64-bit signed integer.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return number
function Certificate:get_created64(cert) end

--- Get the digest algorithm used by the certificate.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return GMime.DigestAlgo
function Certificate:get_digest_algo(cert) end

--- Get the email address associated with the certificate.  If the
--- certificate contains more than one email address with different
--- validities, the email address with the highest validity is
--- returned.  If more than one email address appears in the
--- certificate with the same (highest) validity, the first such email
--- address will be returned.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_email(cert) end

--- Get the expiration date of the certificate's key. A value of %0 means the certificate never expires.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return number
function Certificate:get_expires(cert) end

--- Get the expiration date of the certificate's key in seconds since
--- the UNIX epoch, represented as a 64-bit signed integer. A value of
--- %0 means the certificate never expires.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return number
function Certificate:get_expires64(cert) end

--- Get the certificate's key fingerprint.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_fingerprint(cert) end

--- Get the validity of the certificate's identity information.  This
--- validity applies to the name, email, and user_id fields associated
--- with the certificate.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return GMime.Validity
function Certificate:get_id_validity(cert) end

--- Get the certificate's issuer name.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_issuer_name(cert) end

--- Get the certificate's issuer serial.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_issuer_serial(cert) end

--- Get the certificate's key id.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_key_id(cert) end

--- Get the name associated with the certificate.  For email
--- certificates, this is usually the name of the person who controls
--- the certificate (encoded in UTF-8).  If the certificate contains
--- more than one name with different validities, the name with the
--- highest validity is returned.  If more than one name appears in the
--- certificate with the same (highest) validity, the first such name
--- will be returned.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_name(cert) end

--- Get the public-key algorithm used by the certificate.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return GMime.PubKeyAlgo
function Certificate:get_pubkey_algo(cert) end

--- Get the certificate trust.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return GMime.Trust
function Certificate:get_trust(cert) end

--- Get the certificate's full User ID.  If the certificate contains
--- more than one User ID with different validities, the User ID with
--- the highest validity is returned.  If more than one User ID appears
--- in the certificate with the same (highest) validity, the first such
--- User ID will be returned.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return string
function Certificate:get_user_id(cert) end

--- Set the creation date of the certificate's key.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param created number creation date
function Certificate:set_created(cert, created) end

--- Set the digest algorithm used by the certificate.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param algo GMime.DigestAlgo a #GMimeDigestAlgo
function Certificate:set_digest_algo(cert, algo) end

--- Set the email address associated with the
--- certificate. (e.g. "jane\@example.org")
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param email string certificate's email
function Certificate:set_email(cert, email) end

--- Set the expiration date of the certificate's key. A value of %0 means the certificate never expires.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param expires number expiration date
function Certificate:set_expires(cert, expires) end

--- Set the certificate's key fingerprint.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param fingerprint string fingerprint string
function Certificate:set_fingerprint(cert, fingerprint) end

--- Set the validity associated with the certificate's name, email, and user_id.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param validity GMime.Validity a #GMimeValidity representing the validity of the certificate's identity information.
function Certificate:set_id_validity(cert, validity) end

--- Set the certificate's issuer name.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param issuer_name string certificate's issuer name
function Certificate:set_issuer_name(cert, issuer_name) end

--- Set the certificate's issuer serial.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param issuer_serial string certificate's issuer serial
function Certificate:set_issuer_serial(cert, issuer_serial) end

--- Set the certificate's key id.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param key_id string key id
function Certificate:set_key_id(cert, key_id) end

--- Set the name associated with the certificate.  For email
--- certificates, this is usually the name of the person who controls
--- the certificate (encoded in UTF-8). (e.g. "Jane Doe")
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param name string certificate's name
function Certificate:set_name(cert, name) end

--- Set the public-key algorithm used by the certificate.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param algo GMime.PubKeyAlgo a #GMimePubKeyAlgo
function Certificate:set_pubkey_algo(cert, algo) end

--- Set the certificate trust.
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param trust GMime.Trust a #GMimeTrust value
function Certificate:set_trust(cert, trust) end

--- Set the certificate's full User ID.  By convention, this is usually
--- a mail name-addr as described in RFC 5322.  (e.g. "Jane Doe
--- &lt;jane\@example.org&gt;")
--- @param cert GMime.Certificate a #GMimeCertificate
--- @param user_id string the full User ID for a certificate
function Certificate:set_user_id(cert, user_id) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Certificate:is_type_of(obj) end
--- Creates a new #GMimeCertificateList.
--- @return GMime.CertificateList
function GMime.CertificateList.new() end

--- Adds a #GMimeCertificate to the #GMimeCertificateList.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return number
function CertificateList:add(list, cert) end

--- Clears the list of certificates.
--- @param list GMime.CertificateList a #GMimeCertificateList
function CertificateList:clear(list) end

--- Checks whether or not the specified #GMimeCertificate is contained within
--- the #GMimeCertificateList.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return boolean
function CertificateList:contains(list, cert) end

--- Gets the #GMimeCertificate at the specified index.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param index number index of #GMimeCertificate to get
--- @return GMime.Certificate
function CertificateList:get_certificate(list, index) end

--- Gets the index of the specified #GMimeCertificate inside the
--- #GMimeCertificateList.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return number
function CertificateList:index_of(list, cert) end

--- Inserts a #GMimeCertificate into the #GMimeCertificateList at the specified
--- index.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param index number index to insert at
--- @param cert GMime.Certificate a #GMimeCertificate
function CertificateList:insert(list, index, cert) end

--- Gets the length of the list.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @return number
function CertificateList:length(list) end

--- Removes a #GMimeCertificate from the #GMimeCertificateList.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param cert GMime.Certificate a #GMimeCertificate
--- @return boolean
function CertificateList:remove(list, cert) end

--- Removes a #GMimeCertificate from the #GMimeCertificateList at the specified
--- index.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param index number index of the certificate to remove
--- @return boolean
function CertificateList:remove_at(list, index) end

--- Sets the #GMimeCertificate at the specified index to @cert.
--- @param list GMime.CertificateList a #GMimeCertificateList
--- @param index number index of #GMimeCertificate to set
--- @param cert GMime.Certificate a #GMimeCertificate
function CertificateList:set_certificate(list, index, cert) end

--- @param obj GObject.Object
--- @return boolean
function GMime.CertificateList:is_type_of(obj) end
--- Creates a new #GMimeContentDisposition object.
--- @return GMime.ContentDisposition
function GMime.ContentDisposition.new() end

--- Encodes the Content-Disposition header.
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return string
function ContentDisposition:encode(disposition, options) end

--- Gets the disposition or nil on fail.
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @return string
function ContentDisposition:get_disposition(disposition) end

--- Gets the parameter value specified by @name if it's available.
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @param name string parameter name
--- @return string
function ContentDisposition:get_parameter(disposition, name) end

--- Gets the Content-Disposition parameter list.
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @return GMime.ParamList
function ContentDisposition:get_parameters(disposition) end

--- Determines if a Content-Disposition has a value of "attachment".
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @return boolean
function ContentDisposition:is_attachment(disposition) end

--- Sets the disposition to @value which may be one of
--- #GMIME_DISPOSITION_ATTACHMENT or #GMIME_DISPOSITION_INLINE or, by
--- your choice, any other string which would indicate how the MIME
--- part should be displayed by the MUA.
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @param value string disposition value
function ContentDisposition:set_disposition(disposition, value) end

--- Sets a parameter on the Content-Disposition.
--- 
--- Note: The @name should be in US-ASCII while the @value should be in
--- UTF-8.
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
--- @param name string parameter name
--- @param value string parameter value
function ContentDisposition:set_parameter(disposition, name, value) end

--- Parses the input string into a #GMimeContentDisposition object.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param str string Content-Disposition field value
--- @return GMime.ContentDisposition
function GMime.ContentDisposition.parse(options, str) end

--- @param obj GObject.Object
--- @return boolean
function GMime.ContentDisposition:is_type_of(obj) end
--- Creates a Content-Type object with type @type and subtype @subtype.
--- @param type string the MIME type or nil for the default value
--- @param subtype string the MIME subtype or nil for the default value
--- @return GMime.ContentType
function GMime.ContentType.new(type, subtype) end

--- Encodes the Content-Disposition header.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return string
function ContentType:encode(content_type, options) end

--- Gets the Content-Type's media sub-type.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @return string
function ContentType:get_media_subtype(content_type) end

--- Gets the Content-Type's media type.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @return string
function ContentType:get_media_type(content_type) end

--- Allocates a string buffer containing the type and subtype defined
--- by the @content_type.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @return string
function ContentType:get_mime_type(content_type) end

--- Gets the parameter value specified by @name if it's available.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @param name string parameter name (aka attribute)
--- @return string
function ContentType:get_parameter(content_type, name) end

--- Gets the Content-Type's parameter list.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @return GMime.ParamList
function ContentType:get_parameters(content_type) end

--- Compares the given type and subtype with that of the given mime
--- type object.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @param type string MIME type to compare against
--- @param subtype string MIME subtype to compare against
--- @return boolean
function ContentType:is_type(content_type, type, subtype) end

--- Sets the Content-Type's media subtype.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @param subtype string media subtype
function ContentType:set_media_subtype(content_type, subtype) end

--- Sets the Content-Type's media type.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @param type string media type
function ContentType:set_media_type(content_type, type) end

--- Sets a parameter on the Content-Type.
--- 
--- Note: The @name should be in US-ASCII while the @value should be in
--- UTF-8.
--- @param content_type GMime.ContentType a #GMimeContentType
--- @param name string parameter name (aka attribute)
--- @param value string parameter value
function ContentType:set_parameter(content_type, name, value) end

--- Parses the input string into a #GMimeContentType object.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param str string input string containing a content-type (and params)
--- @return GMime.ContentType
function GMime.ContentType.parse(options, str) end

--- @param obj GObject.Object
--- @return boolean
function GMime.ContentType:is_type_of(obj) end
--- Creates a new crypto context for the specified @protocol.
--- @param protocol string the crypto protocol
--- @return GMime.CryptoContext|nil
function GMime.CryptoContext.new(protocol) end

--- Decrypts the ciphertext input stream and writes the resulting cleartext
--- to the output stream.
--- 
--- When non-nil, @session_key should be a nil-terminated string,
--- such as the one returned by g_mime_decrypt_result_get_session_key()
--- from a previous decryption. If the @session_key is not valid, decryption
--- will fail.
--- 
--- If the encrypted input stream was also signed, the returned
--- #GMimeDecryptResult will have a non-nil list of signatures, each with a
--- #GMimeSignatureStatus (among other details about each signature).
--- 
--- On success, the returned #GMimeDecryptResult will contain a list of
--- certificates, one for each recipient, that the original encrypted stream
--- was encrypted to.
--- 
--- Note: It *may* be possible to maliciously design an encrypted stream such
--- that recursively decrypting it will result in an endless loop, causing
--- a denial of service attack on your application.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param flags GMime.DecryptFlags a set of #GMimeDecryptFlags
--- @param session_key string? the session key to use or nil
--- @param istream GMime.Stream input/ciphertext stream
--- @param ostream GMime.Stream output/cleartext stream
--- @return GMime.DecryptResult
function CryptoContext:decrypt(ctx, flags, session_key, istream, ostream) end

--- Gets the digest id based on the digest name.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param name string digest name
--- @return GMime.DigestAlgo
function CryptoContext:digest_id(ctx, name) end

--- Gets the digest name based on the digest id @digest.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param digest GMime.DigestAlgo digest id
--- @return string|nil
function CryptoContext:digest_name(ctx, digest) end

--- Encrypts (and optionally signs) the cleartext input stream and
--- writes the resulting ciphertext to the output stream.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param sign boolean sign as well as encrypt
--- @param userid string? the key id (or email address) to use when signing (assuming @sign is %TRUE)
--- @param flags GMime.EncryptFlags a set of #GMimeEncryptFlags
--- @param recipients string[] an array of recipient key ids and/or email addresses
--- @param istream GMime.Stream cleartext input stream
--- @param ostream GMime.Stream ciphertext output stream
--- @return number
function CryptoContext:encrypt(ctx, sign, userid, flags, recipients, istream, ostream) end

--- Exports the keys/certificates in @keys to the stream @ostream from
--- the key/certificate database controlled by @ctx.
--- 
--- If @keys is nil or contains only a nil element, then all keys
--- will be exported.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param keys string an array of key ids, terminated by a nil element
--- @param ostream GMime.Stream output stream
--- @return number
function CryptoContext:export_keys(ctx, keys, ostream) end

--- Gets the encryption protocol for the crypto context.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @return string|nil
function CryptoContext:get_encryption_protocol(ctx) end

--- Gets the key exchange protocol for the crypto context.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @return string|nil
function CryptoContext:get_key_exchange_protocol(ctx) end

--- Gets the signature protocol for the crypto context.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @return string|nil
function CryptoContext:get_signature_protocol(ctx) end

--- Imports a stream of keys/certificates contained within @istream
--- into the key/certificate database controlled by @ctx.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param istream GMime.Stream input stream (containing keys)
--- @return number
function CryptoContext:import_keys(ctx, istream) end

--- Signs the input stream and writes the resulting signature to the output stream.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param detach boolean %TRUE if @ostream should be the detached signature; otherwise, %FALSE
--- @param userid string private key to use to sign the stream
--- @param istream GMime.Stream input stream
--- @param ostream GMime.Stream output stream
--- @return number
function CryptoContext:sign(ctx, detach, userid, istream, ostream) end

--- Verifies the signature. If @istream is a clearsigned stream, you
--- should pass nil as the @sigstream parameter and may wish to
--- provide an @ostream argument for GMime to output the original
--- plaintext into. Otherwise @sigstream is assumed to be the signature
--- stream and is used to verify the integirity of the @istream.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param flags GMime.VerifyFlags a #GMimeVerifyFlags
--- @param istream GMime.Stream input stream
--- @param sigstream GMime.Stream? detached-signature stream
--- @param ostream GMime.Stream? output stream for use with encapsulated signature input streams
--- @return GMime.SignatureList|nil
function CryptoContext:verify(ctx, flags, istream, sigstream, ostream) end

--- @param obj GObject.Object
--- @return boolean
function GMime.CryptoContext:is_type_of(obj) end
--- Creates a new #GMimeDataWrapper object.
--- @return GMime.DataWrapper
function GMime.DataWrapper.new() end

--- Creates a new #GMimeDataWrapper object around @stream.
--- @param stream GMime.Stream a #GMimeStream
--- @param encoding GMime.ContentEncoding stream's encoding
--- @return GMime.DataWrapper
function GMime.DataWrapper.new_with_stream(stream, encoding) end

--- Gets the encoding type of the stream wrapped by @wrapper.
--- @param wrapper GMime.DataWrapper a #GMimeDataWrapper
--- @return GMime.ContentEncoding
function DataWrapper:get_encoding(wrapper) end

--- Gets a reference to the stream wrapped by @wrapper.
--- @param wrapper GMime.DataWrapper a #GMimeDataWrapper
--- @return GMime.Stream
function DataWrapper:get_stream(wrapper) end

--- Sets the encoding type of the internal stream.
--- @param wrapper GMime.DataWrapper a #GMimeDataWrapper
--- @param encoding GMime.ContentEncoding encoding
function DataWrapper:set_encoding(wrapper, encoding) end

--- Replaces the wrapper's internal stream with @stream. Don't forget,
--- if @stream is not of the same encoding as the old stream, you'll
--- want to call g_mime_data_wrapper_set_encoding() as well.
--- 
--- Note: caller is responsible for its own reference on
--- @stream.
--- @param wrapper GMime.DataWrapper a #GMimeDataWrapper
--- @param stream GMime.Stream a #GMimeStream
function DataWrapper:set_stream(wrapper, stream) end

--- Writes the raw (decoded) data to the output stream.
--- @param wrapper GMime.DataWrapper a #GMimeDataWrapper
--- @param stream GMime.Stream output stream
--- @return number
function DataWrapper:write_to_stream(wrapper, stream) end

--- @param obj GObject.Object
--- @return boolean
function GMime.DataWrapper:is_type_of(obj) end
--- Creates a new #GMimeDecryptResult object.
--- @return GMime.DecryptResult
function GMime.DecryptResult.new() end

--- Get the cipher algorithm used.
--- @param result GMime.DecryptResult a #GMimeDecryptResult
--- @return GMime.CipherAlgo
function DecryptResult:get_cipher(result) end

--- Get the mdc digest algorithm used.
--- @param result GMime.DecryptResult a #GMimeDecryptResult
--- @return GMime.DigestAlgo
function DecryptResult:get_mdc(result) end

--- Gets the list of certificates that the stream had been encrypted to.
--- @param result GMime.DecryptResult A #GMimeDecryptResult
--- @return GMime.CertificateList
function DecryptResult:get_recipients(result) end

--- Get the session key used for this decryption.
--- @param result GMime.DecryptResult a #GMimeDecryptResult
--- @return string|nil
function DecryptResult:get_session_key(result) end

--- Gets a list of signatures if the encrypted stream had also been signed.
--- @param result GMime.DecryptResult A #GMimeDecryptResult
--- @return GMime.SignatureList|nil
function DecryptResult:get_signatures(result) end

--- Set the cipher algorithm used.
--- @param result GMime.DecryptResult a #GMimeDecryptResult
--- @param cipher GMime.CipherAlgo a #GMimeCipherAlgo
function DecryptResult:set_cipher(result, cipher) end

--- Set the mdc digest algorithm used.
--- @param result GMime.DecryptResult a #GMimeDecryptResult
--- @param mdc GMime.DigestAlgo a #GMimeDigestAlgo
function DecryptResult:set_mdc(result, mdc) end

--- Sets the list of certificates that the stream had been encrypted to.
--- @param result GMime.DecryptResult A #GMimeDecryptResult
--- @param recipients GMime.CertificateList A #GMimeCertificateList
function DecryptResult:set_recipients(result, recipients) end

--- Set the session key to be returned by this decryption result.
--- @param result GMime.DecryptResult a #GMimeDecryptResult
--- @param session_key string? a string representing the session key or nil to unset the key
function DecryptResult:set_session_key(result, session_key) end

--- Sets the list of signatures.
--- @param result GMime.DecryptResult A #GMimeDecryptResult
--- @param signatures GMime.SignatureList A #GMimeSignatureList
function DecryptResult:set_signatures(result, signatures) end

--- @param obj GObject.Object
--- @return boolean
function GMime.DecryptResult:is_type_of(obj) end
--- Sets number of bytes backed up on the input, new calls replace
--- previous ones
--- @param filter GMime.Filter filter
--- @param data number[] data to backup
--- @param length number length of @data
function Filter:backup(filter, data, length) end

--- Completes the filtering.
--- @param filter GMime.Filter filter
--- @param inbuf number[] input buffer
--- @param inlen number input buffer length
--- @param prespace number prespace buffer length
--- @return number[], number, number
function Filter:complete(filter, inbuf, inlen, prespace) end

--- Copies @filter into a new #GMimeFilter object.
--- @param filter GMime.Filter filter
--- @return GMime.Filter
function Filter:copy(filter) end

--- Filters the input data and writes it to @out.
--- @param filter GMime.Filter filter
--- @param inbuf number[] input buffer
--- @param inlen number input buffer length
--- @param prespace number prespace buffer length
--- @return number[], number, number
function Filter:filter(filter, inbuf, inlen, prespace) end

--- Resets the filter.
--- @param filter GMime.Filter a #GMimeFilter object
function Filter:reset(filter) end

--- Ensure this much size is available for filter output (if required)
--- @param filter GMime.Filter filter
--- @param size number requested size for the output buffer
--- @param keep boolean %TRUE if existing data in the output buffer should be kept
function Filter:set_size(filter, size, keep) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Filter:is_type_of(obj) end
--- Creates a new basic filter for @encoding.
--- @param encoding GMime.ContentEncoding a #GMimeContentEncoding
--- @param encode boolean %TRUE to encode or %FALSE to decode
--- @return GMime.Filter
function GMime.FilterBasic.new(encoding, encode) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterBasic:is_type_of(obj) end
--- Creates a new GMimeFilterBest filter. @flags are used to determine
--- which information to keep statistics of. If the
--- #GMIME_FILTER_BEST_CHARSET bit is set, the filter will be able to
--- compute the best charset for encoding the stream of data
--- filtered. If the #GMIME_FILTER_BEST_ENCODING bit is set, the filter
--- will be able to compute the best Content-Transfer-Encoding for use
--- with the stream being filtered.
--- 
--- Note: In order for the g_mime_filter_best_charset() function to
--- work, the stream being filtered MUST already be encoded in UTF-8.
--- @param flags GMime.FilterBestFlags filter flags
--- @return GMime.Filter
function GMime.FilterBest.new(flags) end

--- Calculates the best charset for encoding the content filtered
--- through the @best filter.
--- @param best GMime.FilterBest a #GMimeFilterBest
--- @return string
function FilterBest:charset(best) end

--- Calculates the most efficient Content-Transfer-Encoding for the
--- content filtered through @best that fits within the encoding
--- @constraint.
--- @param best GMime.FilterBest a #GMimeFilterBest
--- @param constraint GMime.EncodingConstraint a #GMimeEncodingConstraint
--- @return GMime.ContentEncoding
function FilterBest:encoding(best, constraint) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterBest:is_type_of(obj) end
--- Creates a new #GMimeFilterCharset filter.
--- @param from_charset string charset to convert from
--- @param to_charset string charset to convert to
--- @return GMime.Filter
function GMime.FilterCharset.new(from_charset, to_charset) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterCharset:is_type_of(obj) end
--- Creates a new checksum filter.
--- @param type GLib.ChecksumType the type of checksum
--- @return GMime.Filter
function GMime.FilterChecksum.new(type) end

--- Outputs the checksum digest into @digest.
--- @param checksum GMime.FilterChecksum checksum filter object
--- @param digest number the digest buffer
--- @param len number the length of the digest buffer
--- @return number
function FilterChecksum:get_digest(checksum, digest, len) end

--- Outputs the checksum digest as a newly allocated hexadecimal string.
--- @param checksum GMime.FilterChecksum checksum filter object
--- @return string
function FilterChecksum:get_string(checksum) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterChecksum:is_type_of(obj) end
--- Creates a new #GMimeFilterDos2Unix filter.
--- @param ensure_newline boolean %TRUE if the filter should ensure that the stream ends in a new line
--- @return GMime.Filter
function GMime.FilterDos2Unix.new(ensure_newline) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterDos2Unix:is_type_of(obj) end
--- Creates a new GMimeFilterEnriched object.
--- @param flags number flags
--- @return GMime.Filter
function GMime.FilterEnriched.new(flags) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterEnriched:is_type_of(obj) end
--- Creates a new GMimeFilterFrom filter. If @mode is
--- #GMIME_FILTER_FROM_MODE_ARMOR, the from-filter will encode from
--- lines using the quoted-printable encoding resulting in "=46rom ".
--- Using the #GMIME_FILTER_FROM_MODE_DEFAULT or
--- #GMIME_FILTER_FROM_MODE_ESCAPE mode (they are the same), from lines
--- will be escaped to ">From ".
--- 
--- Note: If you plan on using a from-filter in mode ARMOR, you should
--- remember to also use a #GMimeFilterBasic filter with an encoding of
--- #GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE.
--- @param mode GMime.FilterFromMode filter mode
--- @return GMime.Filter
function GMime.FilterFrom.new(mode) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterFrom:is_type_of(obj) end
--- Creates a new gzip (or gunzip) filter.
--- @param mode GMime.FilterGZipMode zip or unzip
--- @param level number compression level
--- @return GMime.Filter
function GMime.FilterGZip.new(mode, level) end

--- Gets the comment that was either previously set or retrieved when decoding a gzip stream.
--- @param gzip GMime.FilterGZip A #GMimeFilterGZip filter
--- @return string
function FilterGZip:get_comment(gzip) end

--- Gets the filename that was either previously set or retrieved when decoding a gzip stream.
--- @param gzip GMime.FilterGZip A #GMimeFilterGZip filter
--- @return string
function FilterGZip:get_filename(gzip) end

--- Sets the comment that should be used when generating the gzip header.
--- @param gzip GMime.FilterGZip A #GMimeFilterGZip filter
--- @param comment string The comment
function FilterGZip:set_comment(gzip, comment) end

--- Sets the filename that should be used when generating the gzip header.
--- @param gzip GMime.FilterGZip A #GMimeFilterGZip filter
--- @param filename string The name of the file
function FilterGZip:set_filename(gzip, filename) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterGZip:is_type_of(obj) end
--- Creates a new GMimeFilterHTML filter which can be used to convert a
--- plain UTF-8 text stream into an html stream.
--- @param flags number html flags
--- @param colour number citation colour
--- @return GMime.Filter
function GMime.FilterHTML.new(flags, colour) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterHTML:is_type_of(obj) end
--- Creates a new #GMimeFilterOpenPGP filter.
--- @return GMime.Filter
function GMime.FilterOpenPGP.new() end

--- Gets the stream offset of the beginning of the OpenPGP data block, if any have been found.
--- @param openpgp GMime.FilterOpenPGP A #GMimeFilterOpenPGP filter
--- @return number
function FilterOpenPGP:get_begin_offset(openpgp) end

--- Gets the type of OpenPGP data that has been detected.
--- @param openpgp GMime.FilterOpenPGP A #GMimeFilterOpenPGP filter
--- @return GMime.OpenPGPData
function FilterOpenPGP:get_data_type(openpgp) end

--- Gets the stream offset of the end of the OpenPGP data block, if any have been found.
--- @param openpgp GMime.FilterOpenPGP A #GMimeFilterOpenPGP filter
--- @return number
function FilterOpenPGP:get_end_offset(openpgp) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterOpenPGP:is_type_of(obj) end
--- Creates a new #GMimeFilterSmtpData filter.
--- @return GMime.Filter
function GMime.FilterSmtpData.new() end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterSmtpData:is_type_of(obj) end
--- Creates a new #GMimeFilterStrip filter which will strip trailing
--- whitespace from every line of input passed through the filter.
--- @return GMime.Filter
function GMime.FilterStrip.new() end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterStrip:is_type_of(obj) end
--- Creates a new #GMimeFilterUnix2Dos filter.
--- @param ensure_newline boolean %TRUE if the filter should ensure that the stream ends in a new line
--- @return GMime.Filter
function GMime.FilterUnix2Dos.new(ensure_newline) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterUnix2Dos:is_type_of(obj) end
--- Creates a new GMimeFilterWindows filter. When a stream of text has
--- been filtered, it can be determined whether or not said text stream
--- was in @claimed_charset or the equivalent Windows-CP125# charset.
--- @param claimed_charset string charset that a text stream claims to be
--- @return GMime.Filter
function GMime.FilterWindows.new(claimed_charset) end

--- Determines whether or not a Windows-CP125# charset has been
--- detected so far.
--- @param filter GMime.FilterWindows windows filter object
--- @return boolean
function FilterWindows:is_windows_charset(filter) end

--- Figures out the real charset that the text is encoded in based on whether or not Windows-CP125# characters were found.
--- @param filter GMime.FilterWindows windows filter object
--- @return string
function FilterWindows:real_charset(filter) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterWindows:is_type_of(obj) end
--- Creates a new yEnc filter.
--- @param encode boolean encode vs decode
--- @return GMime.Filter
function GMime.FilterYenc.new(encode) end

--- Get the computed crc or (guint32) -1 on fail.
--- @param yenc GMime.FilterYenc yEnc filter
--- @return number
function FilterYenc:get_crc(yenc) end

--- Get the computed part crc or (guint32) -1 on fail.
--- @param yenc GMime.FilterYenc yEnc filter
--- @return number
function FilterYenc:get_pcrc(yenc) end

--- Sets the current crc32 value on the yEnc filter @yenc to @crc.
--- @param yenc GMime.FilterYenc yEnc filter
--- @param crc number crc32
function FilterYenc:set_crc(yenc, crc) end

--- Sets the current state of the yencoder/ydecoder
--- @param yenc GMime.FilterYenc yEnc filter
--- @param state number encode/decode state
function FilterYenc:set_state(yenc, state) end

--- @param obj GObject.Object
--- @return boolean
function GMime.FilterYenc:is_type_of(obj) end
--- Creates a new gpg crypto context object.
--- @return GMime.CryptoContext
function GMime.GpgContext.new() end

--- @param obj GObject.Object
--- @return boolean
function GMime.GpgContext:is_type_of(obj) end
--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a Sender, From, Reply-To, To, Cc, or Bcc header value
--- @param charset string a charset (note: unused)
--- @return string
function Header:format_addrlist(header, options, value, charset) end

--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a Content-Disposition header value
--- @param charset string a charset (note: unused)
--- @return string
function Header:format_content_disposition(header, options, value, charset) end

--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a Content-Type header value
--- @param charset string a charset (note: unused)
--- @return string
function Header:format_content_type(header, options, value, charset) end

--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a header value
--- @param charset string a charset to use when encoding the @value
--- @return string
function Header:format_default(header, options, value, charset) end

--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a Message-Id or Content-Id header value
--- @param charset string a charset (note: unused)
--- @return string
function Header:format_message_id(header, options, value, charset) end

--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a Received header value
--- @param charset string a charset (note: unused)
--- @return string
function Header:format_received(header, options, value, charset) end

--- Parses the @value and then re-formats it to conform to the formatting options,
--- folding the value if necessary.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string a References or In-Reply-To header value
--- @param charset string a charset (note: unused)
--- @return string
function Header:format_references(header, options, value, charset) end

--- Gets the header's name.
--- @param header GMime.Header a #GMimeHeader
--- @return string
function Header:get_name(header) end

--- Gets the header's stream offset if known.
--- @param header GMime.Header a #GMimeHeader
--- @return number
function Header:get_offset(header) end

--- Gets the header's raw name. The raw header name is the complete string up to
--- (but not including) the ':' separating the header's name from its value. This
--- string may be different from the value returned by g_mime_header_get_name()
--- if the parsed message's header contained trailing whitespace after the header
--- name, such as: "Subject : this is the subject\r\n".
--- @param header GMime.Header a #GMimeHeader
--- @return string
function Header:get_raw_name(header) end

--- Gets the header's raw (folded) value.
--- @param header GMime.Header a #GMimeHeader
--- @return string
function Header:get_raw_value(header) end

--- Gets the header's unfolded value.
--- @param header GMime.Header a #GMimeHeader
--- @return string
function Header:get_value(header) end

--- Sets the header's raw value.
--- @param header GMime.Header a #GMimeHeader
--- @param raw_value string the raw value
function Header:set_raw_value(header, raw_value) end

--- Sets the header's decoded value.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param value string the new header value
--- @param charset string a charset
function Header:set_value(header, options, value, charset) end

--- Write the header to the specified stream.
--- @param header GMime.Header a #GMimeHeader
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param stream GMime.Stream a #GMimeStream
--- @return number
function Header:write_to_stream(header, options, stream) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Header:is_type_of(obj) end
--- Creates a new #GMimeHeaderList object.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.HeaderList
function GMime.HeaderList.new(options) end

--- Appends a header. If @value is nil, a space will be set aside for it
--- (useful for setting the order of headers before values can be
--- obtained for them) otherwise the header will be unset.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param name string header name
--- @param value string header value
--- @param charset string a charset
function HeaderList:append(headers, name, value, charset) end

--- Removes all of the headers from the #GMimeHeaderList.
--- @param headers GMime.HeaderList a #GMimeHeaderList
function HeaderList:clear(headers) end

--- Checks whether or not a header exists.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param name string header name
--- @return boolean
function HeaderList:contains(headers, name) end

--- Gets the number of headers contained within the header list.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @return number
function HeaderList:get_count(headers) end

--- Gets the first header with the specified name.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param name string header name
--- @return GMime.Header
function HeaderList:get_header(headers, name) end

--- Gets the header at the specified @index within the list.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param index number the 0-based index of the header
--- @return GMime.Header
function HeaderList:get_header_at(headers, index) end

--- Prepends a header. If @value is nil, a space will be set aside
--- for it (useful for setting the order of headers before values can
--- be obtained for them) otherwise the header will be unset.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param name string header name
--- @param value string header value
--- @param charset string a charset
function HeaderList:prepend(headers, name, value, charset) end

--- Remove the first instance of the specified header.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param name string header name
--- @return boolean
function HeaderList:remove(headers, name) end

--- Removes the header at the specified @index from @headers.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param index number the 0-based index of the header to remove
function HeaderList:remove_at(headers, index) end

--- Set the value of the specified header. If @value is nil and the
--- header, @name, had not been previously set, a space will be set
--- aside for it (useful for setting the order of headers before values
--- can be obtained for them) otherwise the header will be unset.
--- 
--- Note: If there are multiple headers with the specified field name,
--- the first instance of the header will be replaced and further
--- instances will be removed.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param name string header name
--- @param value string header value
--- @param charset string a charset
function HeaderList:set(headers, name, value, charset) end

--- Allocates a string buffer containing the raw rfc822 headers
--- contained in @headers.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return string
function HeaderList:to_string(headers, options) end

--- Write the headers to a stream.
--- @param headers GMime.HeaderList a #GMimeHeaderList
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param stream GMime.Stream output stream
--- @return number
function HeaderList:write_to_stream(headers, options, stream) end

--- @param obj GObject.Object
--- @return boolean
function GMime.HeaderList:is_type_of(obj) end
--- Gets the charset to be used when encoding the name of the mailbox or group.
--- @param ia GMime.InternetAddress a #InternetAddress
--- @return string|nil
function InternetAddress:get_charset(ia) end

--- Gets the display name of the #InternetAddress.
--- @param ia GMime.InternetAddress a #InternetAddress
--- @return string|nil
function InternetAddress:get_name(ia) end

--- Set the charset to use for encoding the name of the mailbox or group.
--- @param ia GMime.InternetAddress a #InternetAddress
--- @param charset string? the charset to use when encoding the name or nil to use the defaults
function InternetAddress:set_charset(ia, charset) end

--- Set the display name of the #InternetAddress.
--- 
--- Note: The @name string should be in UTF-8.
--- @param ia GMime.InternetAddress a #InternetAddress
--- @param name string the display name for the address group or mailbox
function InternetAddress:set_name(ia, name) end

--- Allocates a string containing the contents of the #InternetAddress
--- object.
--- @param ia GMime.InternetAddress Internet Address object
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param encode boolean %TRUE if the address should be rfc2047 encoded
--- @return string
function InternetAddress:to_string(ia, options, encode) end

--- @param obj GObject.Object
--- @return boolean
function GMime.InternetAddress:is_type_of(obj) end
--- Creates a new #InternetAddressGroup object with the specified
--- @name.
--- @param name string group name
--- @return GMime.InternetAddress
function GMime.InternetAddressGroup.new(name) end

--- Add a contact to the internet address group.
--- @param group GMime.InternetAddressGroup a #InternetAddressGroup
--- @param member GMime.InternetAddress a #InternetAddress
--- @return number
function InternetAddressGroup:add_member(group, member) end

--- Gets the #InternetAddressList containing the group members of an
--- rfc822 group address.
--- @param group GMime.InternetAddressGroup a #InternetAddressGroup
--- @return GMime.InternetAddressList
function InternetAddressGroup:get_members(group) end

--- Set the members of the internet address group.
--- @param group GMime.InternetAddressGroup a #InternetAddressGroup
--- @param members GMime.InternetAddressList a #InternetAddressList
function InternetAddressGroup:set_members(group, members) end

--- @param obj GObject.Object
--- @return boolean
function GMime.InternetAddressGroup:is_type_of(obj) end
--- Creates a new #InternetAddressList.
--- @return GMime.InternetAddressList
function GMime.InternetAddressList.new() end

--- Adds an #InternetAddress to the #InternetAddressList.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param ia GMime.InternetAddress a #InternetAddress
--- @return number
function InternetAddressList:add(list, ia) end

--- Adds all of the addresses in @append to @list.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param append GMime.InternetAddressList a #InternetAddressList
function InternetAddressList:append(list, append) end

--- Clears the list of addresses.
--- @param list GMime.InternetAddressList a #InternetAddressList
function InternetAddressList:clear(list) end

--- Checks whether or not the specified #InternetAddress is contained
--- within the #InternetAddressList.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param ia GMime.InternetAddress a #InternetAddress
--- @return boolean
function InternetAddressList:contains(list, ia) end

--- Writes the rfc2047-encoded rfc822 formatted addresses in @list to
--- @str, folding appropriately.
--- @param list GMime.InternetAddressList list of internet addresses
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param str GLib.String string to write to
function InternetAddressList:encode(list, options, str) end

--- Gets the #InternetAddress at the specified index.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param index number index of #InternetAddress to get
--- @return GMime.InternetAddress
function InternetAddressList:get_address(list, index) end

--- Gets the index of the specified #InternetAddress inside the
--- #InternetAddressList.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param ia GMime.InternetAddress a #InternetAddress
--- @return number
function InternetAddressList:index_of(list, ia) end

--- Inserts an #InternetAddress into the #InternetAddressList at the
--- specified index.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param index number index to insert at
--- @param ia GMime.InternetAddress a #InternetAddress
function InternetAddressList:insert(list, index, ia) end

--- Gets the length of the list.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @return number
function InternetAddressList:length(list) end

--- Inserts all of the addresses in @prepend to the beginning of @list.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param prepend GMime.InternetAddressList a #InternetAddressList
function InternetAddressList:prepend(list, prepend) end

--- Removes an #InternetAddress from the #InternetAddressList.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param ia GMime.InternetAddress a #InternetAddress
--- @return boolean
function InternetAddressList:remove(list, ia) end

--- Removes an #InternetAddress from the #InternetAddressList at the
--- specified index.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param index number index to remove
--- @return boolean
function InternetAddressList:remove_at(list, index) end

--- Sets the #InternetAddress at the specified index to @ia.
--- @param list GMime.InternetAddressList a #InternetAddressList
--- @param index number index of #InternetAddress to set
--- @param ia GMime.InternetAddress a #InternetAddress
function InternetAddressList:set_address(list, index, ia) end

--- Allocates a string buffer containing the rfc822 formatted addresses
--- in @list.
--- @param list GMime.InternetAddressList list of internet addresses
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param encode boolean %TRUE if the address should be rfc2047 encoded
--- @return string|nil
function InternetAddressList:to_string(list, options, encode) end

--- Construct a list of internet addresses from the given string.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param str string a string containing internet addresses
--- @return GMime.InternetAddressList|nil
function GMime.InternetAddressList.parse(options, str) end

--- @param obj GObject.Object
--- @return boolean
function GMime.InternetAddressList:is_type_of(obj) end
--- Creates a new #InternetAddress object with the specified @name and
--- @addr.
--- @param name string person's name
--- @param addr string person's address
--- @return GMime.InternetAddress
function GMime.InternetAddressMailbox.new(name, addr) end

--- Gets the addr-spec of the internet address mailbox.
--- @param mailbox GMime.InternetAddressMailbox a #InternetAddressMailbox
--- @return string
function InternetAddressMailbox:get_addr(mailbox) end

--- Gets the IDN ascii-encoded addr-spec.
--- @param mailbox GMime.InternetAddressMailbox a #InternetAddressMailbox
--- @return string
function InternetAddressMailbox:get_idn_addr(mailbox) end

--- Set the mailbox address.
--- @param mailbox GMime.InternetAddressMailbox a #InternetAddressMailbox
--- @param addr string contact's email address
function InternetAddressMailbox:set_addr(mailbox, addr) end

--- @param obj GObject.Object
--- @return boolean
function GMime.InternetAddressMailbox:is_type_of(obj) end
--- If @pretty_headers is %TRUE, then the standard rfc822 headers are
--- initialized so as to put headers in a nice friendly order. This is
--- strictly a cosmetic thing, so if you are unsure, it is safe to say
--- no (%FALSE).
--- @param pretty_headers boolean make pretty headers
--- @return GMime.Message
function GMime.Message.new(pretty_headers) end

--- Add a mailbox of a chosen type to the MIME message.
--- 
--- Note: The @name (and @addr) strings should be in UTF-8.
--- @param message GMime.Message A #GMimeMessage
--- @param type GMime.AddressType A #GMimeAddressType
--- @param name string The name of the mailbox (or nil)
--- @param addr string The address of the mailbox
function Message:add_mailbox(message, type, name, addr) end

--- Recursively calls @callback on each of the mime parts in the mime message.
--- @param message GMime.Message A #GMimeMessage
--- @param callback GMime.ObjectForeachFunc function to call on each of the mime parts  contained by the mime message
--- @param user_data any? user-supplied callback data
function Message:foreach(message, callback, user_data) end

--- Gets a list of addresses of the specified @type from the @message.
--- @param message GMime.Message A #GMimeMessage
--- @param type GMime.AddressType A #GMimeAddressType
--- @return GMime.InternetAddressList
function Message:get_addresses(message, type) end

--- Gets the complete list of recipients for @message.
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_all_recipients(message) end

--- Creates a new #GMimeAutocryptHeaderList of relevant headers of the
--- given type based on the recipient(s) of an e-mail message.
--- 
--- Returns the same object as
--- #g_mime_message_get_autocrypt_gossip_headers_with_inner_part , but
--- handles decryption and cleanup automatically.
--- 
--- @flags and @session_key are passed through to
--- #g_mime_multipart_encrypted_decrypt, as needed.
--- 
--- If the message is not actually an encrypted message, returns nil:
--- it should be ignored for purposes of evaluating gossip.
--- 
--- If decryption fails, returns nil.  In this case, an exception
--- will be set on @err to provide information about the decryption
--- failure.
--- @param message GMime.Message a #GMimeMessage object, which is expected to be encrypted.
--- @param now GLib.DateTime a #GDateTime object, or nil
--- @param flags GMime.DecryptFlags a #GMimeDecryptFlags, to be used during decryption
--- @param session_key string session key to use or nil
--- @return GMime.AutocryptHeaderList|nil
function Message:get_autocrypt_gossip_headers(message, now, flags, session_key) end

--- Creates a new #GMimeAutocryptHeaderList of relevant headers of the
--- given type based on the recipient(s) of an e-mail message.
--- 
--- You must pass the decrypted inner part of the message to this
--- function, since Autocrypt-Gossip headers are only stored within the
--- encrypted layer.
--- 
--- If you don't already have the decrypted inner part available to
--- you, you probably want to use
--- #g_mime_message_get_autocrypt_gossip_headers instead.
--- 
--- Each header in the returned list will:
--- 
---  - have a valid address
---  - be of the type requested
---  - be complete
--- 
--- If no Autocrypt header is found for a recipient, no
--- #GMimeAutocryptHeader will be in the list associated with that e-mail address.
--- 
--- Note that the following types of Autocrypt headers will not be
--- returned by this function:
--- 
---  - headers of an unrequested type
---  - headers that do not match an address in "From:"
---  - unparseable headers
---  - headers with unknown critical attributes
---  - duplicate valid headers for a given address
--- 
--- On error (e.g. if this version of GMime cannot handle the requested
--- Autocrypt type, or if a parameter is missing or malformed), returns
--- nil
--- 
--- The returned Autocrypt headers will have their effective_date set
--- to the earliest of either:
--- 
--- - the Date: header of the message or
--- - @now (or the current time, if @now is nil)
--- @param message GMime.Message a #GMimeMessage object.
--- @param now GLib.DateTime a #GDateTime object, or nil
--- @param inner_part GMime.Object a #GMimeObject which is the cleartext part of the inner message
--- @return GMime.AutocryptHeaderList|nil
function Message:get_autocrypt_gossip_headers_from_inner_part(message, now, inner_part) end

--- Creates a new #GMimeAutocryptHeader based on the relevant Autocrypt
--- header associated with the sender of an e-mail message.
--- 
--- If the message has no sender in the From: field, or has more than
--- one sender, then this function will return nil.  Autocrypt should
--- ignore the message entirely.
--- 
--- If there is one sender, but no single Autocrypt header is found
--- that matches that e-mail address, a #GMimeAutocryptHeader will be
--- returned for the sender, but it will be incomplete (see
--- #g_mime_autocrypt_header_is_complete).
--- 
--- Note that the following types of Autocrypt headers will not be
--- returned by this function:
--- 
---  - headers that do not match an address in "From:"
---  - unparseable headers
---  - headers with unknown critical attributes
---  - duplicate valid headers for the sender's address
--- 
--- The returned Autocrypt header will have its effective_date set to
--- the earliest of either:
--- 
--- - the Date: header of the message or
--- - @now (or the current time, if @now is nil)
--- @param message GMime.Message a #GMimeMessage object.
--- @param now GLib.DateTime a #GDateTime object, or nil
--- @return GMime.AutocryptHeader|nil
function Message:get_autocrypt_header(message, now) end

--- Gets combined list of parsed addresses in the Bcc header(s).
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_bcc(message) end

--- Attempts to identify the MIME part containing the body of the
--- message.
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.Object|nil
function Message:get_body(message) end

--- Gets combined list of parsed addresses in the Cc header(s).
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_cc(message) end

--- Gets the parsed date and time value from the Date header.
--- @param message GMime.Message A #GMimeMessage
--- @return GLib.DateTime|nil
function Message:get_date(message) end

--- Gets the parsed list of addresses in the From header.
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_from(message) end

--- Gets the Message-Id header of @message.
--- @param message GMime.Message A #GMimeMessage
--- @return string|nil
function Message:get_message_id(message) end

--- Gets the toplevel MIME part contained within @message.
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.Object|nil
function Message:get_mime_part(message) end

--- Gets the parsed list of addresses in the Reply-To header.
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_reply_to(message) end

--- Gets the parsed list of addresses in the Sender header.
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_sender(message) end

--- Gets the subject of the @message.
--- @param message GMime.Message A #GMimeMessage
--- @return string|nil
function Message:get_subject(message) end

--- Gets combined list of parsed addresses in the To header(s).
--- @param message GMime.Message A #GMimeMessage
--- @return GMime.InternetAddressList
function Message:get_to(message) end

--- Splits @message into an array of #GMimeMessage objects each
--- containing a single #GMimeMessagePartial object containing
--- @max_size bytes or fewer. @nparts is set to the number of
--- #GMimeMessagePartial objects created.
--- @param message GMime.Message message object
--- @param max_size number max size
--- @return GMime.Message|nil, number
function Message:partial_split_message(message, max_size) end

--- Sets the Date header on a MIME Message.
--- @param message GMime.Message A #GMimeMessage
--- @param date GLib.DateTime a date to be used in the Date header
function Message:set_date(message, date) end

--- Set the Message-Id on a message.
--- @param message GMime.Message A #GMimeMessage
--- @param message_id string message-id (addr-spec portion)
function Message:set_message_id(message, message_id) end

--- Set the root-level MIME part of the message.
--- @param message GMime.Message A #GMimeMessage
--- @param mime_part GMime.Object The root-level MIME Part
function Message:set_mime_part(message, mime_part) end

--- Set the subject of a @message.
--- 
--- Note: The @subject string should be in UTF-8.
--- @param message GMime.Message A #GMimeMessage
--- @param subject string Subject string
--- @param charset string The charset to use for encoding the subject or nil to use the default
function Message:set_subject(message, subject, charset) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Message:is_type_of(obj) end
--- Creates a new MIME message part object with a default content-type
--- of message/@subtype.
--- @param subtype string message subtype or nil for "rfc822"
--- @return GMime.MessagePart
function GMime.MessagePart.new(subtype) end

--- Creates a new MIME message part object with a default content-type
--- of message/@subtype containing @message.
--- @param subtype string message subtype or nil for "rfc822"
--- @param message GMime.Message message
--- @return GMime.MessagePart
function GMime.MessagePart.new_with_message(subtype, message) end

--- Gets the message object on the message part object @part.
--- @param part GMime.MessagePart message part
--- @return GMime.Message
function MessagePart:get_message(part) end

--- Sets the @message object on the message part object @part.
--- @param part GMime.MessagePart message part
--- @param message GMime.Message message
function MessagePart:set_message(part, message) end

--- @param obj GObject.Object
--- @return boolean
function GMime.MessagePart:is_type_of(obj) end
--- Creates a new MIME message/partial object.
--- @param id string message/partial part id
--- @param number number message/partial part number
--- @param total number total number of message/partial parts
--- @return GMime.MessagePartial
function GMime.MessagePartial.new(id, number, total) end

--- Gets the message/partial id parameter value.
--- @param partial GMime.MessagePartial message/partial object
--- @return string
function MessagePartial:get_id(partial) end

--- Gets the message/partial part number.
--- @param partial GMime.MessagePartial message/partial object
--- @return number
function MessagePartial:get_number(partial) end

--- Gets the total number of message/partial parts needed to
--- reconstruct the original message.
--- @param partial GMime.MessagePartial message/partial object
--- @return number
function MessagePartial:get_total(partial) end

--- Reconstructs the GMimeMessage from the given message/partial parts
--- in @partials.
--- @param partials GMime.MessagePartial an array of message/partial mime parts
--- @param num number the number of elements in @partials
--- @return GMime.Message
function GMime.MessagePartial.reconstruct_message(partials, num) end

--- @param obj GObject.Object
--- @return boolean
function GMime.MessagePartial:is_type_of(obj) end
--- Creates a new MIME multipart object with a default content-type of
--- multipart/mixed.
--- @return GMime.Multipart
function GMime.Multipart.new() end

--- Creates a new MIME multipart object with a content-type of
--- multipart/@subtype.
--- @param subtype string content-type subtype
--- @return GMime.Multipart
function GMime.Multipart.new_with_subtype(subtype) end

--- Appends a mime part to @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param part GMime.Object a #GMimeObject
function Multipart:add(multipart, part) end

--- Removes all subparts from @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
function Multipart:clear(multipart) end

--- Checks if @part is contained within @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param part GMime.Object a #GMimeObject
--- @return boolean
function Multipart:contains(multipart, part) end

--- Recursively calls @callback on each of @multipart's subparts.
--- @param multipart GMime.Multipart a #GMimeMultipart
--- @param callback GMime.ObjectForeachFunc function to call for each of @multipart's  subparts.
--- @param user_data any? user-supplied callback data
function Multipart:foreach(multipart, callback, user_data) end

--- Gets the boundary on the multipart. If the internal boundary is
--- nil, then an auto-generated boundary will be set on the multipart
--- and returned.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @return string
function Multipart:get_boundary(multipart) end

--- Gets the number of parts contained within @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @return number
function Multipart:get_count(multipart) end

--- Gets the epilogue on the multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @return string
function Multipart:get_epilogue(multipart) end

--- Gets the part at the specified @index within the multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param index number the 0-based index of the part
--- @return GMime.Object
function Multipart:get_part(multipart, index) end

--- Gets the prologue on the multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @return string
function Multipart:get_prologue(multipart) end

--- Gets the mime part with the content-id @content_id from the
--- multipart @multipart.
--- @param multipart GMime.Multipart a multipart
--- @param content_id string the content id of the part to look for
--- @return GMime.Object
function Multipart:get_subpart_from_content_id(multipart, content_id) end

--- Gets the 0-based index of @part within @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param part GMime.Object a #GMimeObject
--- @return number
function Multipart:index_of(multipart, part) end

--- Inserts @part into @multipart at the specified @index.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param index number the 0-based index to insert the part
--- @param part GMime.Object a #GMimeObject
function Multipart:insert(multipart, index, part) end

--- Removes the specified @part from @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param part GMime.Object a #GMimeObject
--- @return boolean
function Multipart:remove(multipart, part) end

--- Removes the part at the specified @index from @multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param index number the 0-based index of the part to remove
--- @return GMime.Object
function Multipart:remove_at(multipart, index) end

--- Replaces the part at the specified @index within @multipart with
--- @replacement.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param index number the 0-based index of the part to replace
--- @param replacement GMime.Object a #GMimeObject to use as the replacement
--- @return GMime.Object
function Multipart:replace(multipart, index, replacement) end

--- Sets @boundary as the boundary on the multipart. If @boundary is
--- nil, then a boundary will be auto-generated for you.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param boundary string boundary or nil to autogenerate one
function Multipart:set_boundary(multipart, boundary) end

--- Sets the epilogue on the multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param epilogue string epilogue
function Multipart:set_epilogue(multipart, epilogue) end

--- Sets the prologue on the multipart.
--- @param multipart GMime.Multipart a #GMimeMultipart object
--- @param prologue string prologue
function Multipart:set_prologue(multipart, prologue) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Multipart:is_type_of(obj) end
--- Creates a new MIME multipart/encrypted object.
--- @return GMime.MultipartEncrypted
function GMime.MultipartEncrypted.new() end

--- Attempts to decrypt the encrypted MIME part contained within the
--- multipart/encrypted object @encrypted.
--- 
--- When non-nil, @session_key should be a nil-terminated string,
--- such as the one returned by g_mime_decrypt_result_get_session_key()
--- from a previous decryption. If the @session_key is not valid, decryption
--- will fail.
--- 
--- If @result is non-nil, then on a successful decrypt operation, it will be
--- updated to point to a newly-allocated #GMimeDecryptResult with signature
--- status information as well as a list of recipients that the part was
--- encrypted to.
--- @param encrypted GMime.MultipartEncrypted a #GMimeMultipartEncrypted
--- @param flags GMime.DecryptFlags a #GMimeDecryptFlags
--- @param session_key string session key to use or nil
--- @return GMime.Object|nil, GMime.DecryptResult
function MultipartEncrypted:decrypt(encrypted, flags, session_key) end

--- Attempts to encrypt (and conditionally sign) the @entity MIME part
--- to the public keys of @recipients using the @ctx encryption
--- context. If successful, a new multipart/encrypted object is returned.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param entity GMime.Object MIME part to encrypt
--- @param sign boolean %TRUE if the content should also be signed or %FALSE otherwise
--- @param userid string? user id to use for signing (only used if @sign is %TRUE)
--- @param flags GMime.EncryptFlags a #GMimeEncryptFlags
--- @param recipients string[] an array of recipients to encrypt to
--- @return GMime.MultipartEncrypted|nil
function GMime.MultipartEncrypted.encrypt(ctx, entity, sign, userid, flags, recipients) end

--- @param obj GObject.Object
--- @return boolean
function GMime.MultipartEncrypted:is_type_of(obj) end
--- Creates a new MIME multipart/signed object.
--- @return GMime.MultipartSigned
function GMime.MultipartSigned.new() end

--- Attempts to verify the signed MIME part contained within the
--- multipart/signed object @mps.
--- @param mps GMime.MultipartSigned a #GMimeMultipartSigned
--- @param flags GMime.VerifyFlags a #GMimeVerifyFlags
--- @return GMime.SignatureList|nil
function MultipartSigned:verify(mps, flags) end

--- Attempts to sign the @content MIME part with @userid's private key
--- using the @ctx signing context. If successful, a new multipart/signed
--- object is returned.
--- @param ctx GMime.CryptoContext a #GMimeCryptoContext
--- @param entity GMime.Object MIME part to sign
--- @param userid string user id to sign with
--- @return GMime.MultipartSigned|nil
function GMime.MultipartSigned.sign(ctx, entity, userid) end

--- @param obj GObject.Object
--- @return boolean
function GMime.MultipartSigned:is_type_of(obj) end
--- Performs a lookup of registered #GMimeObject subclasses, registered
--- using g_mime_object_register_type(), to find an appropriate class
--- capable of handling MIME parts of the specified Content-Type. If no
--- class has been registered to handle that type, it looks for a
--- registered class that can handle @content_type's media type. If
--- that also fails, then it will use the generic part class,
--- #GMimePart.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param content_type GMime.ContentType a #GMimeContentType object
--- @return GMime.Object
function GMime.Object.new(options, content_type) end

--- Performs a lookup of registered #GMimeObject subclasses, registered
--- using g_mime_object_register_type(), to find an appropriate class
--- capable of handling MIME parts of type @type/@subtype. If no class
--- has been registered to handle that type, it looks for a registered
--- class that can handle @type. If that also fails, then it will use
--- the generic part class, #GMimePart.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param type string mime type
--- @param subtype string mime subtype
--- @return GMime.Object
function GMime.Object.new_type(options, type, subtype) end

--- Appends a new header to the header list.
--- @param object GMime.Object a #GMimeObject
--- @param header string header name
--- @param value string header value
--- @param charset string a charset
function Object:append_header(object, header, value, charset) end

--- Calculates and sets the most efficient Content-Transfer-Encoding
--- for this #GMimeObject and all child parts based on the @constraint
--- provided.
--- @param object GMime.Object a #GMimeObject
--- @param constraint GMime.EncodingConstraint a #GMimeEncodingConstraint
function Object:encode(object, constraint) end

--- Gets the #GMimeContentDisposition for the specified MIME object.
--- @param object GMime.Object a #GMimeObject
--- @return GMime.ContentDisposition
function Object:get_content_disposition(object) end

--- Gets the value of the Content-Disposition parameter specified by
--- @name, or nil if the parameter does not exist.
--- @param object GMime.Object a #GMimeObject
--- @param name string parameter name
--- @return string
function Object:get_content_disposition_parameter(object, name) end

--- Gets the Content-Id of the MIME object or NULL if one is not set.
--- @param object GMime.Object a #GMimeObject
--- @return string
function Object:get_content_id(object) end

--- Gets the #GMimeContentType object for the given MIME object or
--- nil on fail.
--- @param object GMime.Object a #GMimeObject
--- @return GMime.ContentType
function Object:get_content_type(object) end

--- Gets the value of the content-type param @name set on the MIME part
--- @object.
--- @param object GMime.Object a #GMimeObject
--- @param name string param name
--- @return string
function Object:get_content_type_parameter(object, name) end

--- Gets the MIME object's disposition if set or nil otherwise.
--- @param object GMime.Object a #GMimeObject
--- @return string
function Object:get_disposition(object) end

--- Gets the value of the first header with the specified name.
--- @param object GMime.Object a #GMimeObject
--- @param header string header name
--- @return string
function Object:get_header(object, header) end

--- Get the header list for @object.
--- @param object GMime.Object a #GMimeObject
--- @return GMime.HeaderList
function Object:get_header_list(object) end

--- Allocates a string buffer containing all of the MIME object's raw
--- headers.
--- @param object GMime.Object a #GMimeObject
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return string
function Object:get_headers(object, options) end

--- Prepends a new header to the header list.
--- @param object GMime.Object a #GMimeObject
--- @param header string header name
--- @param value string header value
--- @param charset string a charset
function Object:prepend_header(object, header, value, charset) end

--- Removed the specified header if it exists.
--- @param object GMime.Object a #GMimeObject
--- @param header string header name
--- @return boolean
function Object:remove_header(object, header) end

--- Set the content disposition for the specified mime part and then
--- serializes it to the Content-Disposition header field.
--- @param object GMime.Object a #GMimeObject
--- @param disposition GMime.ContentDisposition a #GMimeContentDisposition object
function Object:set_content_disposition(object, disposition) end

--- Add a content-disposition parameter to the specified mime part.
--- 
--- Note: The @name string should be in US-ASCII while the @value
--- string should be in UTF-8.
--- @param object GMime.Object a #GMimeObject
--- @param name string parameter name
--- @param value string parameter value
function Object:set_content_disposition_parameter(object, name, value) end

--- Sets the Content-Id of the MIME object.
--- @param object GMime.Object a #GMimeObject
--- @param content_id string content-id (addr-spec portion)
function Object:set_content_id(object, content_id) end

--- Sets the content-type for the specified MIME object and then
--- serializes it to the Content-Type header field.
--- @param object GMime.Object a #GMimeObject
--- @param content_type GMime.ContentType a #GMimeContentType object
function Object:set_content_type(object, content_type) end

--- Sets the content-type param @name to the value @value.
--- 
--- Note: The @name string should be in US-ASCII while the @value
--- string should be in UTF-8.
--- @param object GMime.Object a #GMimeObject
--- @param name string param name
--- @param value string param value
function Object:set_content_type_parameter(object, name, value) end

--- Sets the disposition to @disposition which may be one of
--- #GMIME_DISPOSITION_ATTACHMENT or #GMIME_DISPOSITION_INLINE or, by
--- your choice, any other string which would indicate how the MIME
--- part should be displayed by the MUA.
--- @param object GMime.Object a #GMimeObject
--- @param disposition string disposition ("attachment" or "inline")
function Object:set_disposition(object, disposition) end

--- Sets a header to the specified value.
--- @param object GMime.Object a #GMimeObject
--- @param header string header name
--- @param value string header value
--- @param charset string a charset
function Object:set_header(object, header, value, charset) end

--- Allocates a string buffer containing the contents of @object.
--- @param object GMime.Object a #GMimeObject
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return string
function Object:to_string(object, options) end

--- Write only the content of the MIME object to @stream.
--- @param object GMime.Object a #GMimeObject
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param stream GMime.Stream stream
--- @return number
function Object:write_content_to_stream(object, options, stream) end

--- Write the headers and content of the MIME object to @stream.
--- @param object GMime.Object a #GMimeObject
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param stream GMime.Stream stream
--- @return number
function Object:write_to_stream(object, options, stream) end

--- Registers the object type @object_type for use with the
--- g_mime_object_new_type() convenience function.
--- 
--- Note: You may use the wildcard "*" to match any type and/or
--- subtype.
--- @param type string mime type
--- @param subtype string mime subtype
--- @param object_type Glib.GType object type
function GMime.Object.register_type(type, subtype, object_type) end

function GMime.Object.type_registry_init() end

function GMime.Object.type_registry_shutdown() end

--- @param obj GObject.Object
--- @return boolean
function GMime.Object:is_type_of(obj) end
--- Gets the charset used for encoding the parameter.
--- @param param GMime.Param a #GMimeParam
--- @return string
function Param:get_charset(param) end

--- Gets the encoding method used for encoding the parameter.
--- @param param GMime.Param a #GMimeParam
--- @return GMime.ParamEncodingMethod
function Param:get_encoding_method(param) end

--- Gets the language specifier used for encoding the parameter.
--- @param param GMime.Param a #GMimeParam
--- @return string
function Param:get_lang(param) end

--- Gets the name of the parameter.
--- @param param GMime.Param a #GMimeParam
--- @return string
function Param:get_name(param) end

--- Gets the value of the parameter.
--- @param param GMime.Param a #GMimeParam
--- @return string
function Param:get_value(param) end

--- Sets the parameter charset used for encoding the value.
--- @param param GMime.Param a #GMimeParam
--- @param charset string the charset or nil to use the default
function Param:set_charset(param, charset) end

--- Sets the encoding method used for encoding the value.
--- @param param GMime.Param a #GMimeParam
--- @param method GMime.ParamEncodingMethod a #GMimeParamEncodingMethod
function Param:set_encoding_method(param, method) end

--- Sets the parameter language specifier used for encoding the value.
--- @param param GMime.Param a #GMimeParam
--- @param lang string the language specifier
function Param:set_lang(param, lang) end

--- Sets the parameter value to @value.
--- @param param GMime.Param a #GMimeParam
--- @param value string the new parameter value
function Param:set_value(param, value) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Param:is_type_of(obj) end
--- Creates a new Content-Type or Content-Disposition parameter list.
--- @return GMime.ParamList
function GMime.ParamList.new() end

--- Clears the list of parameters.
--- @param list GMime.ParamList a #GMimeParamList
function ParamList:clear(list) end

--- Encodes the parameter list into @str, folding lines if required.
--- @param list GMime.ParamList a #GMimeParamList
--- @param options GMime.FormatOptions a #GMimeFormatOptions or nil
--- @param fold boolean %TRUE if the parameter list should be folded; otherwise, %FALSE
--- @param str GLib.String the output string buffer
function ParamList:encode(list, options, fold, str) end

--- Gets the #GMimeParam with the given @name.
--- @param list GMime.ParamList list: a #GMimeParamList
--- @param name string the name of the parameter
--- @return GMime.Param
function ParamList:get_parameter(list, name) end

--- Gets the #GMimeParam at the specified @index.
--- @param list GMime.ParamList a #GMimeParamList
--- @param index number the index of the requested parameter
--- @return GMime.Param
function ParamList:get_parameter_at(list, index) end

--- Gets the length of the list.
--- @param list GMime.ParamList a #GMimeParamList
--- @return number
function ParamList:length(list) end

--- Removes a parameter from the #GMimeParamList.
--- @param list GMime.ParamList a #GMimeParamList
--- @param name string the name of the parameter
--- @return boolean
function ParamList:remove(list, name) end

--- Removes a #GMimeParam from the #GMimeParamList at the specified index.
--- @param list GMime.ParamList a #GMimeParamList
--- @param index number index of the param to remove
--- @return boolean
function ParamList:remove_at(list, index) end

--- Sets the specified parameter to @value.
--- @param list GMime.ParamList a #GMimeParamList
--- @param name string The name of the parameter
--- @param value string The parameter value
function ParamList:set_parameter(list, name, value) end

--- Parses the input string into a parameter list.
--- @param options GMime.ParserOptions a #GMimeParserOptions or nil
--- @param str string a string to parse
--- @return GMime.ParamList
function GMime.ParamList.parse(options, str) end

--- @param obj GObject.Object
--- @return boolean
function GMime.ParamList:is_type_of(obj) end
--- Creates a new parser object.
--- @return GMime.Parser
function GMime.Parser.new() end

--- Creates a new parser object preset to parse @stream.
--- @param stream GMime.Stream raw message or part stream
--- @return GMime.Parser
function GMime.Parser.new_with_stream(stream) end

--- Constructs a MIME message from @parser.
--- @param parser GMime.Parser a #GMimeParser context
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.Message|nil
function Parser:construct_message(parser, options) end

--- Constructs a MIME part from @parser.
--- @param parser GMime.Parser a #GMimeParser context
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.Object|nil
function Parser:construct_part(parser, options) end

--- Tests the end-of-stream indicator for @parser's internal stream.
--- @param parser GMime.Parser a #GMimeParser context
--- @return boolean
function Parser:eos(parser) end

--- Gets the format that the parser is set to parse.
--- @param parser GMime.Parser a #GMimeParser context
--- @return GMime.Format
function Parser:get_format(parser) end

--- Gets the stream offset of the beginning of the headers of the most
--- recently parsed message.
--- @param parser GMime.Parser a #GMimeParser context
--- @return number
function Parser:get_headers_begin(parser) end

--- Gets the stream offset of the end of the headers of the most
--- recently parsed message.
--- @param parser GMime.Parser a #GMimeParser context
--- @return number
function Parser:get_headers_end(parser) end

--- Gets the mbox-style From-line of the most recently parsed message
--- (gotten from g_mime_parser_construct_message()).
--- @param parser GMime.Parser a #GMimeParser context
--- @return string|nil
function Parser:get_mbox_marker(parser) end

--- Gets the offset of the most recently parsed mbox-style From-line
--- (gotten from g_mime_parser_construct_message()).
--- @param parser GMime.Parser a #GMimeParser context
--- @return number
function Parser:get_mbox_marker_offset(parser) end

--- Gets whether or not the underlying stream is persistent.
--- @param parser GMime.Parser a #GMimeParser context
--- @return boolean
function Parser:get_persist_stream(parser) end

--- Gets whether or not @parser is set to use Content-Length for
--- determining the offset of the end of the message.
--- @param parser GMime.Parser a #GMimeParser context
--- @return boolean
function Parser:get_respect_content_length(parser) end

--- Initializes @parser to use @stream.
--- 
--- WARNING: Initializing a parser with a stream is comparable to
--- selling your soul (@stream) to the devil (@parser). You are
--- basically giving the parser complete control of the stream, this
--- means that you had better not touch the stream so long as the
--- parser is still using it. This means no reading, writing, seeking,
--- or resetting of the stream. Anything that will/could change the
--- current stream's offset is PROHIBITED.
--- 
--- It is also recommended that you not use g_mime_stream_tell()
--- because it will not necessarily give you the current @parser offset
--- since @parser handles its own internal read-ahead buffer. Instead,
--- it is recommended that you use g_mime_parser_tell() if you have a
--- reason to need the current offset of the @parser.
--- @param parser GMime.Parser a #GMimeParser context
--- @param stream GMime.Stream raw message or part stream
function Parser:init_with_stream(parser, stream) end

--- Sets the format that the parser should expect the stream to be in.
--- @param parser GMime.Parser a #GMimeParser context
--- @param format GMime.Format a #GMimeFormat
function Parser:set_format(parser, format) end

--- Sets whether or not the @parser's underlying stream is persistent.
--- 
--- If @persist is %TRUE, the @parser will attempt to construct
--- messages/parts whose content will remain on disk rather than being
--- loaded into memory so as to reduce memory usage. This is the default.
--- 
--- If @persist is %FALSE, the @parser will always load message content
--- into memory.
--- 
--- Note: This attribute only serves as a hint to the @parser. If the
--- underlying stream does not support seeking, then this attribute
--- will be ignored.
--- 
--- By default, this feature is enabled if the underlying stream is seekable.
--- @param parser GMime.Parser a #GMimeParser context
--- @param persist boolean persist attribute
function Parser:set_persist_stream(parser, persist) end

--- Sets whether or not @parser should respect Content-Length headers
--- when deciding where to look for the start of the next message. Only
--- used when the parser is also set to scan for From-lines.
--- 
--- Most notably useful when parsing broken Solaris mbox files (See
--- http://www.jwz.org/doc/content-length.html for details).
--- 
--- By default, this feature is disabled.
--- @param parser GMime.Parser a #GMimeParser context
--- @param respect_content_length boolean %TRUE if the parser should use Content-Length headers or %FALSE otherwise.
function Parser:set_respect_content_length(parser, respect_content_length) end

--- Gets the current stream offset from the parser's internal stream.
--- @param parser GMime.Parser a #GMimeParser context
--- @return number
function Parser:tell(parser) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Parser:is_type_of(obj) end
--- Creates a new MIME Part object with a default content-type of
--- application/octet-stream.
--- @return GMime.Part
function GMime.Part.new() end

--- Creates a new MIME Part with a sepcified type.
--- @param type string content-type string
--- @param subtype string content-subtype string
--- @return GMime.Part
function GMime.Part.new_with_type(type, subtype) end

--- Calculates the most efficient content encoding for the @mime_part
--- given the @constraint.
--- @param mime_part GMime.Part a #GMimePart object
--- @param constraint GMime.EncodingConstraint a #GMimeEncodingConstraint
--- @return GMime.ContentEncoding
function Part:get_best_content_encoding(mime_part, constraint) end

--- Gets the internal data-wrapper of the specified mime part, or nil
--- on error.
--- @param mime_part GMime.Part a #GMimePart object
--- @return GMime.DataWrapper
function Part:get_content(mime_part) end

--- Gets the value of the Content-Description for the specified mime
--- part if it exists or nil otherwise.
--- @param mime_part GMime.Part a #GMimePart object
--- @return string
function Part:get_content_description(mime_part) end

--- Gets the content encoding of the mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @return GMime.ContentEncoding
function Part:get_content_encoding(mime_part) end

--- Gets the content-id of the specified mime part if it exists, or
--- nil otherwise.
--- @param mime_part GMime.Part a #GMimePart object
--- @return string
function Part:get_content_id(mime_part) end

--- Gets the value of the Content-Location header if it exists, or
--- nil otherwise.
--- @param mime_part GMime.Part a #GMimePart object
--- @return string
function Part:get_content_location(mime_part) end

--- Gets the md5sum contained in the Content-Md5 header of the
--- specified mime part if it exists, or nil otherwise.
--- @param mime_part GMime.Part a #GMimePart object
--- @return string
function Part:get_content_md5(mime_part) end

--- Gets the filename of the specificed mime part, or nil if the
--- @mime_part does not have the filename or name parameter set.
--- @param mime_part GMime.Part a #GMimePart object
--- @return string
function Part:get_filename(mime_part) end

--- Gets whether or not (and what type) of OpenPGP data is contained
--- within the #GMimePart.
--- @param mime_part GMime.Part a #GMimePart
--- @return GMime.OpenPGPData
function Part:get_openpgp_data(mime_part) end

--- Determines whether or not the part is an attachment based on the
--- value of the Content-Disposition header.
--- @param mime_part GMime.Part a #GMimePart object
--- @return boolean
function Part:is_attachment(mime_part) end

--- Decrypts the content of the @mime_part and then replaces the content with
--- the new, decrypted, content.
--- @param mime_part GMime.Part a #GMimePart
--- @param flags GMime.DecryptFlags a set of #GMimeDecryptFlags
--- @param session_key string? the session key to use or nil
--- @return GMime.DecryptResult|nil
function Part:openpgp_decrypt(mime_part, flags, session_key) end

--- Encrypts (and optionally signs) the content of the @mime_part and then replaces
--- the content with the new, encrypted, content.
--- @param mime_part GMime.Part a #GMimePart
--- @param sign boolean %TRUE if the content should also be signed; otherwise, %FALSE
--- @param userid string? the key id (or email address) to use when signing (assuming @sign is %TRUE)
--- @param flags GMime.EncryptFlags a set of #GMimeEncryptFlags
--- @param recipients string[] an array of recipient key ids and/or email addresses
--- @return boolean
function Part:openpgp_encrypt(mime_part, sign, userid, flags, recipients) end

--- Signs the content of the @mime_part and then replaces the content with
--- the new, signed, content.
--- @param mime_part GMime.Part a #GMimePart
--- @param userid string the key id (or email address) to use for signing
--- @return boolean
function Part:openpgp_sign(mime_part, userid) end

--- Verifies the OpenPGP signature of the @mime_part and then replaces the content
--- with the original, raw, content.
--- @param mime_part GMime.Part a #GMimePart
--- @param flags GMime.VerifyFlags a set of #GMimeVerifyFlags
--- @return GMime.SignatureList|nil
function Part:openpgp_verify(mime_part, flags) end

--- Sets the content on the mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @param content GMime.DataWrapper a #GMimeDataWrapper content object
function Part:set_content(mime_part, content) end

--- Set the content description for the specified mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @param description string content description
function Part:set_content_description(mime_part, description) end

--- Set the content encoding for the specified mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @param encoding GMime.ContentEncoding a #GMimeContentEncoding
function Part:set_content_encoding(mime_part, encoding) end

--- Set the content id for the specified mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @param content_id string content id
function Part:set_content_id(mime_part, content_id) end

--- Set the content location for the specified mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @param content_location string content location
function Part:set_content_location(mime_part, content_location) end

--- Set the content md5 for the specified mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @param content_md5 string content md5 or nil to generate the md5 digest.
function Part:set_content_md5(mime_part, content_md5) end

--- Sets the "filename" parameter on the Content-Disposition and also sets the
--- "name" parameter on the Content-Type.
--- 
--- Note: The @filename string should be in UTF-8.
--- @param mime_part GMime.Part a #GMimePart object
--- @param filename string the file name
function Part:set_filename(mime_part, filename) end

--- Sets whether or not (and what type) of OpenPGP data is contained
--- within the #GMimePart.
--- @param mime_part GMime.Part a #GMimePart
--- @param data GMime.OpenPGPData a #GMimeOpenPGPData
function Part:set_openpgp_data(mime_part, data) end

--- Verify the content md5 for the specified mime part.
--- @param mime_part GMime.Part a #GMimePart object
--- @return boolean
function Part:verify_content_md5(mime_part) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Part:is_type_of(obj) end
--- Creates a new pkcs7 crypto context object.
--- @return GMime.CryptoContext
function GMime.Pkcs7Context.new() end

--- @param obj GObject.Object
--- @return boolean
function GMime.Pkcs7Context:is_type_of(obj) end
--- Creates a new #GMimeSignature object.
--- @return GMime.Signature
function GMime.Signature.new() end

--- Get the signature's certificate.
--- @param sig GMime.Signature a #GMimeSignature
--- @return GMime.Certificate
function Signature:get_certificate(sig) end

--- Get the creation date of the signature.
--- @param sig GMime.Signature a #GMimeSignature
--- @return number
function Signature:get_created(sig) end

--- Get the creation date of the signature in seconds since the UNIX
--- epoch, represented as a 64-bit signed integer.
--- @param sig GMime.Signature a #GMimeSignature
--- @return number
function Signature:get_created64(sig) end

--- Get the expiration date of the signature. A value of %0 means the signature never expires.
--- @param sig GMime.Signature a #GMimeSignature
--- @return number
function Signature:get_expires(sig) end

--- Get the expiration date of the signature in seconds since the UNIX
--- epoch, represented as a 64-bit signed integer. A value of %0 means
--- the signature never expires.
--- @param sig GMime.Signature a #GMimeSignature
--- @return number
function Signature:get_expires64(sig) end

--- Get the signature status as a bitfield of #GMimeSignatureStatus flags.
--- @param sig GMime.Signature a #GMimeSignature
--- @return GMime.SignatureStatus
function Signature:get_status(sig) end

--- Set the signature's certificate.
--- @param sig GMime.Signature a #GMimeSignature
--- @param cert GMime.Certificate a #GMimeCertificate
function Signature:set_certificate(sig, cert) end

--- Set the creation date of the signature.
--- @param sig GMime.Signature a #GMimeSignature
--- @param created number creation date
function Signature:set_created(sig, created) end

--- Set the expiration date of the signature. A value of %0 means the signature never expires.
--- @param sig GMime.Signature a #GMimeSignature
--- @param expires number expiration date
function Signature:set_expires(sig, expires) end

--- Set the status on the signature.
--- @param sig GMime.Signature a #GMimeSignature
--- @param status GMime.SignatureStatus a #GMimeSignatureStatus
function Signature:set_status(sig, status) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Signature:is_type_of(obj) end
--- Creates a new #GMimeSignatureList.
--- @return GMime.SignatureList
function GMime.SignatureList.new() end

--- Adds a #GMimeSignature to the #GMimeSignatureList.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param sig GMime.Signature a #GMimeSignature
--- @return number
function SignatureList:add(list, sig) end

--- Clears the list of addresses.
--- @param list GMime.SignatureList a #GMimeSignatureList
function SignatureList:clear(list) end

--- Checks whether or not the specified #GMimeSignature is contained within
--- the #GMimeSignatureList.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param sig GMime.Signature a #GMimeSignature
--- @return boolean
function SignatureList:contains(list, sig) end

--- Gets the #GMimeSignature at the specified index.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param index number index of #GMimeSignature to get
--- @return GMime.Signature
function SignatureList:get_signature(list, index) end

--- Gets the index of the specified #GMimeSignature inside the
--- #GMimeSignatureList.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param sig GMime.Signature a #GMimeSignature
--- @return number
function SignatureList:index_of(list, sig) end

--- Inserts a #GMimeSignature into the #GMimeSignatureList at the specified
--- index.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param index number index to insert at
--- @param sig GMime.Signature a #GMimeSignature
function SignatureList:insert(list, index, sig) end

--- Gets the length of the list.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @return number
function SignatureList:length(list) end

--- Removes a #GMimeSignature from the #GMimeSignatureList.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param sig GMime.Signature a #GMimeSignature
--- @return boolean
function SignatureList:remove(list, sig) end

--- Removes a #GMimeSignature from the #GMimeSignatureList at the specified
--- index.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param index number index to remove
--- @return boolean
function SignatureList:remove_at(list, index) end

--- Sets the #GMimeSignature at the specified index to @sig.
--- @param list GMime.SignatureList a #GMimeSignatureList
--- @param index number index of #GMimeSignature to set
--- @param sig GMime.Signature a #GMimeSignature
function SignatureList:set_signature(list, index, sig) end

--- @param obj GObject.Object
--- @return boolean
function GMime.SignatureList:is_type_of(obj) end
--- Reads in at most one less than @max characters from @stream and
--- stores them into the buffer pointed to by @buf. Reading stops after
--- an EOS or newline ('\n'). If a newline is read, it is stored into
--- the buffer. A '\0' is stored after the last character in the
--- buffer.
--- @param stream GMime.Stream stream
--- @param buf number[] line buffer
--- @param max number max length of a line
--- @return number
function Stream:buffer_gets(stream, buf, max) end

--- Reads a single line into @buffer.
--- @param stream GMime.Stream stream
--- @param buffer number[] output buffer
function Stream:buffer_readln(stream, buffer) end

--- Closes the stream.
--- @param stream GMime.Stream a #GMimeStream
--- @return number
function Stream:close(stream) end

--- Initializes a new stream with bounds @start and @end.
--- @param stream GMime.Stream a #GMimeStream
--- @param start number start boundary
--- @param end_ number end boundary
function Stream:construct(stream, start, end_) end

--- Tests the end-of-stream indicator for @stream.
--- @param stream GMime.Stream a #GMimeStream
--- @return boolean
function Stream:eos(stream) end

--- Sync's the stream to disk.
--- @param stream GMime.Stream a #GMimeStream
--- @return number
function Stream:flush(stream) end

--- Gets the length of the stream.
--- @param stream GMime.Stream a #GMimeStream
--- @return number
function Stream:length(stream) end

--- Attempts to read up to @len bytes from @stream into @buf.
--- @param stream GMime.Stream a #GMimeStream
--- @param buf number[] buffer
--- @param len number buffer length
--- @return number
function Stream:read(stream, buf, len) end

--- Resets the stream.
--- @param stream GMime.Stream a #GMimeStream
--- @return number
function Stream:reset(stream) end

--- Repositions the offset of the stream @stream to
--- the argument @offset according to the
--- directive @whence as follows:
--- 
---     #GMIME_STREAM_SEEK_SET: Seek @offset bytes relative to
---     the beginning (bound_start) of the stream.
--- 
---     #GMIME_STREAM_SEEK_CUR: Seek @offset bytes relative to the
---     current offset of the stream.
--- 
---     #GMIME_STREAM_SEEK_END: Seek @offset bytes relative to the
---     end of the stream (bound_end if non-negative).
--- @param stream GMime.Stream a #GMimeStream
--- @param offset number positional offset
--- @param whence GMime.SeekWhence seek directive
--- @return number
function Stream:seek(stream, offset, whence) end

--- Set the bounds on a stream.
--- @param stream GMime.Stream a #GMimeStream
--- @param start number start boundary
--- @param end_ number end boundary
function Stream:set_bounds(stream, start, end_) end

--- Creates a new substream of @stream with bounds @start and @end.
--- @param stream GMime.Stream a #GMimeStream
--- @param start number start boundary
--- @param end_ number end boundary
--- @return GMime.Stream
function Stream:substream(stream, start, end_) end

--- Gets the current offset within the stream.
--- @param stream GMime.Stream a #GMimeStream
--- @return number
function Stream:tell(stream) end

--- Attempts to write up to @len bytes of @buf to @stream.
--- @param stream GMime.Stream a #GMimeStream
--- @param buf number[] buffer
--- @param len number buffer length
--- @return number
function Stream:write(stream, buf, len) end

--- Writes @string to @stream.
--- @param stream GMime.Stream a #GMimeStream
--- @param str string string to write
--- @return number
function Stream:write_string(stream, str) end

--- Attempts to write the source stream to the destination stream.
--- @param src GMime.Stream source stream
--- @param dest GMime.Stream destination stream
--- @return number
function Stream:write_to_stream(src, dest) end

--- Writes at most @count blocks described by @vector to @stream.
--- @param stream GMime.Stream a #GMimeStream
--- @param vector GMime.StreamIOVector[] a #GMimeStreamIOVector
--- @param count number number of vector elements
--- @return number
function Stream:writev(stream, vector, count) end

--- @param obj GObject.Object
--- @return boolean
function GMime.Stream:is_type_of(obj) end
--- Creates a new GMimeStreamBuffer object.
--- @param source GMime.Stream source stream
--- @param mode GMime.StreamBufferMode buffering mode
--- @return GMime.Stream
function GMime.StreamBuffer.new(source, mode) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamBuffer:is_type_of(obj) end
--- Creates a new #GMimeStreamCat object.
--- @return GMime.Stream
function GMime.StreamCat.new() end

--- Adds the @source stream to the @cat.
--- @param cat GMime.StreamCat a #GMimeStreamCat
--- @param source GMime.Stream a source stream
--- @return number
function StreamCat:add_source(cat, source) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamCat:is_type_of(obj) end
--- Creates a new #GMimeStreamFile object around @fp.
--- 
--- Note: The created #GMimeStreamFile object will own the FILE pointer
--- passed in.
--- @param fp any? a FILE pointer
--- @return GMime.Stream
function GMime.StreamFile.new(fp) end

--- Creates a new #GMimeStreamFile object around @fp with bounds @start
--- and @end.
--- 
--- Note: The created #GMimeStreamFile object will own the FILE pointer
--- passed in.
--- @param fp any? a FILE pointer
--- @param start number start boundary
--- @param end_ number end boundary
--- @return GMime.Stream
function GMime.StreamFile.new_with_bounds(fp, start, end_) end

--- Gets whether or not @stream owns the backend FILE pointer.
--- @param stream GMime.StreamFile a #GMimeStreamFile
--- @return boolean
function StreamFile:get_owner(stream) end

--- Sets whether or not @stream owns the backend FILE pointer.
--- 
--- Note: @owner should be %TRUE if the stream should fclose() the
--- backend FILE pointer when destroyed or %FALSE otherwise.
--- @param stream GMime.StreamFile a #GMimeStreamFile
--- @param owner boolean %TRUE if this stream should own the FILE pointer or %FALSE otherwise
function StreamFile:set_owner(stream, owner) end

--- Creates a new #GMimeStreamFile object for the specified @path.
--- @param path string the path to a file
--- @param mode string as in fopen(3)
--- @return GMime.Stream
function GMime.StreamFile.open(path, mode) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamFile:is_type_of(obj) end
--- Creates a new #GMimeStreamFilter object using @stream as the source
--- stream.
--- @param stream GMime.Stream source stream
--- @return GMime.Stream
function GMime.StreamFilter.new(stream) end

--- Adds @filter to @stream. Filters are applied in the same order in
--- which they are added.
--- @param stream GMime.StreamFilter a #GMimeStreamFilter
--- @param filter GMime.Filter a #GMimeFilter
--- @return number
function StreamFilter:add(stream, filter) end

--- Gets whether or not @stream owns the source stream.
--- @param stream GMime.StreamFilter a #GMimeStreamFilter
--- @return boolean
function StreamFilter:get_owner(stream) end

--- Removed a filter from the stream based on the id (as returned from
--- filter_add).
--- @param stream GMime.StreamFilter a #GMimeStreamFilter
--- @param id number filter id
function StreamFilter:remove(stream, id) end

--- Sets whether or not @stream owns the source stream..
--- 
--- Note: @owner should be %TRUE if the stream should close() the
--- backend source stream when destroyed or %FALSE otherwise.
--- @param stream GMime.StreamFilter a #GMimeStreamFilter
--- @param owner boolean %TRUE if this stream should own the source stream or %FALSE otherwise
function StreamFilter:set_owner(stream, owner) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamFilter:is_type_of(obj) end
--- Creates a new #GMimeStreamFs object around @fd.
--- @param fd number a file descriptor
--- @return GMime.Stream
function GMime.StreamFs.new(fd) end

--- Creates a new #GMimeStreamFs object around @fd with bounds @start
--- and @end.
--- @param fd number a file descriptor
--- @param start number start boundary
--- @param end_ number end boundary
--- @return GMime.Stream
function GMime.StreamFs.new_with_bounds(fd, start, end_) end

--- Gets whether or not @stream owns the backend file descriptor.
--- @param stream GMime.StreamFs a #GMimeStreamFs
--- @return boolean
function StreamFs:get_owner(stream) end

--- Sets whether or not @stream owns the backend file descriptor.
--- 
--- Note: @owner should be %TRUE if the stream should close() the
--- backend file descriptor when destroyed or %FALSE otherwise.
--- @param stream GMime.StreamFs a #GMimeStreamFs
--- @param owner boolean %TRUE if this stream should own the file descriptor or %FALSE otherwise
function StreamFs:set_owner(stream, owner) end

--- Creates a new #GMimeStreamFs object for the specified @path.
--- @param path string the path to a file
--- @param flags number as in open(2)
--- @param mode number as in open(2)
--- @return GMime.Stream
function GMime.StreamFs.open(path, flags, mode) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamFs:is_type_of(obj) end
--- Creates a new #GMimeStreamGIO wrapper around a #GFile object.
--- @param file Gio.File a #GFile
--- @return GMime.Stream
function GMime.StreamGIO.new(file) end

--- Creates a new #GMimeStreamGIO stream around a #GFile with bounds
--- @start and @end.
--- @param file Gio.File a #GFile
--- @param start number start boundary
--- @param end_ number end boundary
--- @return GMime.Stream
function GMime.StreamGIO.new_with_bounds(file, start, end_) end

--- Gets whether or not @stream owns the backend #GFile.
--- @param stream GMime.StreamGIO a #GMimeStreamGIO stream
--- @return boolean
function StreamGIO:get_owner(stream) end

--- Sets whether or not @stream owns the backend GIO pointer.
--- 
--- Note: @owner should be %TRUE if the stream should close() the
--- backend file descriptor when destroyed or %FALSE otherwise.
--- @param stream GMime.StreamGIO a #GMimeStreamGIO stream
--- @param owner boolean %TRUE if this stream should own the #GFile or %FALSE otherwise
function StreamGIO:set_owner(stream, owner) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamGIO:is_type_of(obj) end
--- Creates a new #GMimeStreamMem object.
--- @return GMime.Stream
function GMime.StreamMem.new() end

--- Creates a new #GMimeStreamMem object and initializes the stream
--- contents with the first @len bytes of @buffer.
--- @param buffer number[] stream data
--- @param len number buffer length
--- @return GMime.Stream
function GMime.StreamMem.new_with_buffer(buffer, len) end

--- Creates a new #GMimeStreamMem with data @array.
--- @param array number[] source data
--- @return GMime.Stream
function GMime.StreamMem.new_with_byte_array(array) end

--- Gets the byte array from the memory stream.
--- @param mem GMime.StreamMem a #GMimeStreamMem
--- @return number[]
function StreamMem:get_byte_array(mem) end

--- Gets whether or not @mem owns the backend memory buffer.
--- @param mem GMime.StreamMem a #GMimeStreamMem
--- @return boolean
function StreamMem:get_owner(mem) end

--- Sets the byte array on the memory stream.
--- 
--- Note: The memory stream is not responsible for freeing the byte
--- array. Use g_mime_stream_mem_set_owner() to change this behavior.
--- @param mem GMime.StreamMem a #GMimeStreamMem
--- @param array number[] stream data
function StreamMem:set_byte_array(mem, array) end

--- Sets whether or not @mem owns the backend memory buffer.
--- 
--- Note: @owner should be %TRUE if the stream should free the backend
--- memory buffer when destroyed or %FALSE otherwise.
--- @param mem GMime.StreamMem a #GMimeStreamMem
--- @param owner boolean %TRUE if this stream should own the #GByteArray or %FALSE otherwise
function StreamMem:set_owner(mem, owner) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamMem:is_type_of(obj) end
--- Creates a new #GMimeStreamMmap object around @fd.
--- @param fd number file descriptor
--- @param prot number protection flags
--- @param flags number map flags
--- @return GMime.Stream
function GMime.StreamMmap.new(fd, prot, flags) end

--- Creates a new #GMimeStreamMmap object around @fd with bounds @start
--- and @end.
--- @param fd number file descriptor
--- @param prot number protection flags
--- @param flags number map flags
--- @param start number start boundary
--- @param end_ number end boundary
--- @return GMime.Stream
function GMime.StreamMmap.new_with_bounds(fd, prot, flags, start, end_) end

--- Gets whether or not @stream owns the backend file descriptor.
--- @param stream GMime.StreamMmap a #GMimeStreamFs
--- @return boolean
function StreamMmap:get_owner(stream) end

--- Sets whether or not @stream owns the backend file descriptor.
--- 
--- Note: @owner should be %TRUE if the stream should close() the
--- backend file descriptor when destroyed or %FALSE otherwise.
--- @param stream GMime.StreamMmap a #GMimeStreamMmap
--- @param owner boolean %TRUE if this stream should own the file descriptor or %FALSE otherwise
function StreamMmap:set_owner(stream, owner) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamMmap:is_type_of(obj) end
--- Creates a new #GMimeStreamNull object.
--- @return GMime.Stream
function GMime.StreamNull.new() end

--- Gets whether or not the stream should keep track of the number of newlines
--- encountered.
--- @param stream GMime.StreamNull a #GMimeStreamNull
--- @return boolean
function StreamNull:get_count_newlines(stream) end

--- Sets whether or not the stream should keep track of the number of newlines
--- encountered.
--- @param stream GMime.StreamNull a #GMimeStreamNull
--- @param count boolean %TRUE if newlines should be counted or %FALSE otherwise
function StreamNull:set_count_newlines(stream, count) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamNull:is_type_of(obj) end
--- Creates a new #GMimeStreamPipe object around @fd.
--- @param fd number a pipe descriptor
--- @return GMime.Stream
function GMime.StreamPipe.new(fd) end

--- Gets whether or not @stream owns the backend pipe descriptor.
--- @param stream GMime.StreamPipe a #GMimeStreamPipe
--- @return boolean
function StreamPipe:get_owner(stream) end

--- Sets whether or not @stream owns the backend pipe descriptor.
--- 
--- Note: @owner should be %TRUE if the stream should close() the
--- backend pipe descriptor when destroyed or %FALSE otherwise.
--- @param stream GMime.StreamPipe a #GMimeStreamPipe
--- @param owner boolean owner
function StreamPipe:set_owner(stream, owner) end

--- @param obj GObject.Object
--- @return boolean
function GMime.StreamPipe:is_type_of(obj) end
--- Creates a new text MIME part object with a default content-type of
--- text/plain.
--- @return GMime.TextPart
function GMime.TextPart.new() end

--- Creates a new text MIME part with a sepcified subtype.
--- @param subtype string textual subtype string
--- @return GMime.TextPart
function GMime.TextPart.new_with_subtype(subtype) end

--- Gets the value of the charset parameter on the Content-Type header.
--- @param mime_part GMime.TextPart a #GMimeTextPart
--- @return string
function TextPart:get_charset(mime_part) end

--- Gets the text content of the @mime_part as a string.
--- @param mime_part GMime.TextPart a #GMimeTextPart
--- @return string
function TextPart:get_text(mime_part) end

--- Sets the charset parameter on the Content-Type header to the specified value.
--- @param mime_part GMime.TextPart a #GMimeTextPart
--- @param charset string the name of the charset
function TextPart:set_charset(mime_part, charset) end

--- Sets the specified text as the content and updates the charset parameter on the Content-Type header.
--- @param mime_part GMime.TextPart a #GMimeTextPart
--- @param text string the text in utf-8
function TextPart:set_text(mime_part, text) end

--- @param obj GObject.Object
--- @return boolean
function GMime.TextPart:is_type_of(obj) end
--- Gets the best charset name based on the charset mask @charset.
--- @param charset GMime.Charset charset mask
--- @return string|nil
function GMime.Charset:best_name(charset) end

--- Check to see if the UTF-8 @text will fit safely within @charset.
--- @param mask GMime.Charset a #GMimeCharset mask
--- @param charset string a charset
--- @param text string utf-8 text to check
--- @param len number length of @text
--- @return boolean
function GMime.Charset:can_encode(mask, charset, text, len) end

--- Initializes a charset mask structure.
--- @param charset GMime.Charset charset mask
function GMime.Charset:init(charset) end

--- Steps through the input buffer 1 unicode character (glyph) at a
--- time (ie, not necessarily 1 byte at a time). Bitwise 'and' our
--- @charset->mask with the mask for each glyph. This has the effect of
--- limiting what charsets our @charset->mask can match.
--- @param charset GMime.Charset charset structure
--- @param inbuf string input text buffer (must be in UTF-8)
--- @param inlen number input buffer length
function GMime.Charset:step(charset, inbuf, inlen) end

--- Computes the best charset to use to encode this text buffer.
--- @param inbuf string a UTF-8 text buffer
--- @param inlen number input buffer length
--- @return string|nil
function GMime.Charset.best(inbuf, inlen) end

--- Attempts to find a canonical charset name for @charset.
--- 
--- Note: Will normally return the same value as
--- g_mime_charset_iconv_name() unless the system iconv does not use
--- the canonical ISO charset names (such as using ISO8859-1 rather
--- than the canonical form ISO-8859-1).
--- @param charset string charset name
--- @return string
function GMime.Charset.canon_name(charset) end

--- Attempts to find an iconv-friendly charset name for @charset.
--- @param charset string charset name
--- @return string
function GMime.Charset.iconv_name(charset) end

--- Maps the ISO-8859-# charset to the equivalent Windows-CP125#
--- charset.
--- @param isocharset string ISO-8859-# charset
--- @return string
function GMime.Charset.iso_to_windows(isocharset) end

--- Attempts to find a specific language code that is specific to
--- @charset. Currently only handles CJK and Russian/Ukranian
--- charset->lang mapping. Everything else will return nil.
--- @param charset string charset name
--- @return string|nil
function GMime.Charset.language(charset) end

--- Gets the user's locale charset (or iso-8859-1 by default).
--- 
--- Note: This function is deprecated. Use g_mime_locale_charset()
--- instead.
--- @return string
function GMime.Charset.locale_name() end

--- Initializes character set maps.
--- 
--- Note: g_mime_init() calls this routine for you.
function GMime.Charset.map_init() end

--- Frees internal lookup tables created in g_mime_charset_map_init().
function GMime.Charset.map_shutdown() end

--- Attempts to find an iconv-friendly charset name for @charset.
--- 
--- Note: This function is deprecated. Use g_mime_charset_iconv_name()
--- instead.
--- @param charset string charset name
--- @return string
function GMime.Charset.name(charset) end

--- Completes the incremental encode or decode of the input stream (see
--- g_mime_encoding_step() for details).
--- @param state GMime.Encoding a #GMimeEncoding
--- @param inbuf string an input buffer to encode or decode
--- @param inlen number input buffer length
--- @param outbuf string an output buffer
--- @return number
function GMime.Encoding:flush(state, inbuf, inlen, outbuf) end

--- Initializes a #GMimeEncoding state machine for decoding from
--- @encoding.
--- @param state GMime.Encoding a #GMimeEncoding to initialize
--- @param encoding GMime.ContentEncoding a #GMimeContentEncoding to use
function GMime.Encoding:init_decode(state, encoding) end

--- Initializes a #GMimeEncoding state machine for encoding to
--- @encoding.
--- @param state GMime.Encoding a #GMimeEncoding to initialize
--- @param encoding GMime.ContentEncoding a #GMimeContentEncoding to use
function GMime.Encoding:init_encode(state, encoding) end

--- Given the input length, @inlen, calculate the needed output length
--- to perform an encoding or decoding step.
--- @param state GMime.Encoding a #GMimeEncoding
--- @param inlen number an input length
--- @return number
function GMime.Encoding:outlen(state, inlen) end

--- Resets the state of the #GMimeEncoding.
--- @param state GMime.Encoding a #GMimeEncoding to reset
function GMime.Encoding:reset(state) end

--- Incrementally encodes or decodes (depending on @state) an input
--- stream by 'stepping' through a block of input at a time.
--- 
--- You should make sure @outbuf is large enough by calling
--- g_mime_encoding_outlen() to find out how large @outbuf might need
--- to be.
--- @param state GMime.Encoding a #GMimeEncoding
--- @param inbuf string an input buffer to encode or decode
--- @param inlen number input buffer length
--- @param outbuf string an output buffer
--- @return number
function GMime.Encoding:step(state, inbuf, inlen, outbuf) end

--- Decodes a chunk of base64 encoded data.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been decoded
--- @return number
function GMime.Encoding.base64_decode_step(inbuf, inlen, outbuf, state, save) end

--- Base64 encodes the input stream to the output stream. Call this
--- when finished encoding data with g_mime_encoding_base64_encode_step()
--- to flush off the last little bit.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.Encoding.base64_encode_close(inbuf, inlen, outbuf, state, save) end

--- Base64 encodes a chunk of data. Performs an 'encode step', only
--- encodes blocks of 3 characters to the output at a time, saves
--- left-over state in state and save (initialise to 0 on first
--- invocation).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.Encoding.base64_encode_step(inbuf, inlen, outbuf, state, save) end

--- Decodes a block of quoted-printable encoded data. Performs a
--- 'decode step' on a chunk of QP encoded data.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been decoded
--- @return number
function GMime.Encoding.quoted_decode_step(inbuf, inlen, outbuf, state, save) end

--- Quoted-printable encodes a block of text. Call this when finished
--- encoding data with g_mime_encoding_quoted_encode_step() to flush off
--- the last little bit.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.Encoding.quoted_encode_close(inbuf, inlen, outbuf, state, save) end

--- Quoted-printable encodes a block of text. Performs an 'encode
--- step', saves left-over state in state and save (initialise to -1 on
--- first invocation).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.Encoding.quoted_encode_step(inbuf, inlen, outbuf, state, save) end

--- Uudecodes a chunk of data. Performs a 'decode step' on a chunk of
--- uuencoded data. Assumes the "begin mode filename" line has
--- been stripped off.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been decoded
--- @return number
function GMime.Encoding.uudecode_step(inbuf, inlen, outbuf, state, save) end

--- Uuencodes a chunk of data. Call this when finished encoding data
--- with g_mime_encoding_uuencode_step() to flush off the last little bit.
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output buffer
--- @param uubuf number temporary buffer of 60 bytes
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.Encoding.uuencode_close(inbuf, inlen, outbuf, uubuf, state, save) end

--- Uuencodes a chunk of data. Performs an 'encode step', only encodes
--- blocks of 45 characters to the output at a time, saves left-over
--- state in @uubuf, @state and @save (initialize to 0 on first
--- invocation).
--- @param inbuf number input buffer
--- @param inlen number input buffer length
--- @param outbuf number output stream
--- @param uubuf number temporary buffer of 60 bytes
--- @param state number holds the number of bits that are stored in @save
--- @param save number leftover bits that have not yet been encoded
--- @return number
function GMime.Encoding.uuencode_step(inbuf, inlen, outbuf, uubuf, state, save) end

--- Creates a new set of #GMimeFormatOptions.
--- @return GMime.FormatOptions
function GMime.FormatOptions.new() end

--- Adds the given header to the list of headers that should be hidden.
--- @param options GMime.FormatOptions a #GMimeFormatOptions
--- @param header string a header name
function GMime.FormatOptions:add_hidden_header(options, header) end

--- Clears the list of headers that should be hidden.
--- @param options GMime.FormatOptions a #GMimeFormatOptions
function GMime.FormatOptions:clear_hidden_headers(options) end

--- Clones a #GMimeFormatOptions.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return GMime.FormatOptions
function GMime.FormatOptions:clone(options) end

--- Creates a #GMimeFilter suitable for converting line-endings to the
--- currently set new-line format.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param ensure_newline boolean %TRUE if the output must *always* end with a new line
--- @return GMime.Filter
function GMime.FormatOptions:create_newline_filter(options, ensure_newline) end

--- Frees a set of #GMimeFormatOptions.
--- @param options GMime.FormatOptions a #GMimeFormatOptions
function GMime.FormatOptions:free(options) end

--- Gets a string representing the currently set new-line format.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return string
function GMime.FormatOptions:get_newline(options) end

--- Gets the new-line format to use when writing out messages and headers.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return GMime.NewLineFormat
function GMime.FormatOptions:get_newline_format(options) end

--- Gets the parameter encoding method to use for #GMimeParam parameters that do not
--- already have an encoding method specified.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @return GMime.ParamEncodingMethod
function GMime.FormatOptions:get_param_encoding_method(options) end

--- Gets whether or not the specified header should be hidden.
--- @param options GMime.FormatOptions? a #GMimeFormatOptions or nil
--- @param header string the name of a header
--- @return boolean
function GMime.FormatOptions:is_hidden_header(options, header) end

--- Removes the given header from the list of headers that should be hidden.
--- @param options GMime.FormatOptions a #GMimeFormatOptions
--- @param header string a header name
function GMime.FormatOptions:remove_hidden_header(options, header) end

--- Sets the new-line format that should be used when writing headers and messages.
--- @param options GMime.FormatOptions a #GMimeFormatOptions
--- @param newline GMime.NewLineFormat a #GMimeNewLineFormat
function GMime.FormatOptions:set_newline_format(options, newline) end

--- Sets the parameter encoding method to use when encoding parameters which
--- do not have an encoding method specified.
--- 
--- Note: #GMIME_PARAM_ENCODING_METHOD_DEFAULT is not allowed.
--- @param options GMime.FormatOptions a #GMimeFormatOptions
--- @param method GMime.ParamEncodingMethod a #GMimeParamEncodingMethod
function GMime.FormatOptions:set_param_encoding_method(options, method) end

--- Gets the default format options.
--- @return GMime.FormatOptions
function GMime.FormatOptions.get_default() end

--- Creates a new set of #GMimeParserOptions.
--- @return GMime.ParserOptions
function GMime.ParserOptions.new() end

--- Clones a #GMimeParserOptions.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.ParserOptions
function GMime.ParserOptions:clone(options) end

--- Frees a set of #GMimeParserOptions.
--- @param options GMime.ParserOptions a #GMimeParserOptions
function GMime.ParserOptions:free(options) end

--- Gets the compliance mode that should be used when parsing rfc822 addresses.
--- 
--- Note: Even in #GMIME_RFC_COMPLIANCE_STRICT mode, the address parser is fairly liberal in
--- what it accepts. Setting it to #GMIME_RFC_COMPLIANCE_LOOSE just makes it try harder to
--- deal with garbage input.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.RfcComplianceMode
function GMime.ParserOptions:get_address_compliance_mode(options) end

--- Gets whether or not the rfc822 address parser should allow addresses without a domain.
--- 
--- In general, you'll probably want this value to be %FALSE (the default) as it allows
--- maximum interoperability with existing (broken) mail clients and other mail software
--- such as sloppily written perl scripts (aka spambots) that do not properly quote the
--- name when it contains a comma.
--- 
--- This option exists in order to allow parsing of mailbox addresses that do not have a
--- domain component. These types of addresses are rare and were typically only used when
--- sending mail to other users on the same UNIX system.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return boolean
function GMime.ParserOptions:get_allow_addresses_without_domain(options) end

--- Gets the fallback charsets to try when decoding 8-bit headers.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return string[]
function GMime.ParserOptions:get_fallback_charsets(options) end

--- Gets the compliance mode that should be used when parsing Content-Type and
--- Content-Disposition parameters.
--- 
--- Note: Even in #GMIME_RFC_COMPLIANCE_STRICT mode, the parameter parser is fairly liberal
--- in what it accepts. Setting it to #GMIME_RFC_COMPLIANCE_LOOSE just makes it try harder
--- to deal with garbage input.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.RfcComplianceMode
function GMime.ParserOptions:get_parameter_compliance_mode(options) end

--- Gets the compliance mode that should be used when parsing rfc2047 encoded words.
--- 
--- Note: Even in #GMIME_RFC_COMPLIANCE_STRICT mode, the rfc2047 parser is fairly liberal
--- in what it accepts. Setting it to #GMIME_RFC_COMPLIANCE_LOOSE just makes it try harder
--- to deal with garbage input.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @return GMime.RfcComplianceMode
function GMime.ParserOptions:get_rfc2047_compliance_mode(options) end

--- Sets the compliance mode that should be used when parsing rfc822 addresses.
--- 
--- In general, you'll probably want this value to be #GMIME_RFC_COMPLIANCE_LOOSE
--- (the default) as it allows maximum interoperability with existing (broken) mail clients
--- and other mail software such as sloppily written perl scripts (aka spambots).
--- 
--- Note: Even in #GMIME_RFC_COMPLIANCE_STRICT mode, the address parser is fairly liberal in
--- what it accepts. Setting it to #GMIME_RFC_COMPLIANCE_LOOSE just makes it try harder to
--- deal with garbage input.
--- @param options GMime.ParserOptions a #GMimeParserOptions
--- @param mode GMime.RfcComplianceMode a #GMimeRfcComplianceMode
function GMime.ParserOptions:set_address_compliance_mode(options, mode) end

--- Sets whether the rfc822 address parser should allow addresses without a domain.
--- 
--- In general, you'll probably want this value to be %FALSE (the default) as it allows
--- maximum interoperability with existing (broken) mail clients and other mail software
--- such as sloppily written perl scripts (aka spambots) that do not properly quote the
--- name when it contains a comma.
--- 
--- This option exists in order to allow parsing of mailbox addresses that do not have a
--- domain component. These types of addresses are rare and were typically only used when
--- sending mail to other users on the same UNIX system.
--- @param options GMime.ParserOptions a #GMimeParserOptions
--- @param allow boolean %TRUE if the parser should allow addresses without a domain or %FALSE otherwise
function GMime.ParserOptions:set_allow_addresses_without_domain(options, allow) end

--- Sets the fallback charsets to try when decoding 8-bit headers.
--- 
--- Note: It is recommended that the list of charsets start with utf-8
--- and end with iso-8859-1.
--- @param options GMime.ParserOptions a #GMimeParserOptions
--- @param charsets string a nil-terminated list of charsets or nil for the default list
function GMime.ParserOptions:set_fallback_charsets(options, charsets) end

--- Sets the compliance mode that should be used when parsing Content-Type and
--- Content-Disposition parameters.
--- 
--- In general, you'll probably want this value to be #GMIME_RFC_COMPLIANCE_LOOSE
--- (the default) as it allows maximum interoperability with existing (broken) mail clients
--- and other mail software such as sloppily written perl scripts (aka spambots).
--- 
--- Note: Even in #GMIME_RFC_COMPLIANCE_STRICT mode, the parameter parser is fairly liberal
--- in what it accepts. Setting it to #GMIME_RFC_COMPLIANCE_LOOSE just makes it try harder
--- to deal with garbage input.
--- @param options GMime.ParserOptions a #GMimeParserOptions
--- @param mode GMime.RfcComplianceMode a #GMimeRfcComplianceMode
function GMime.ParserOptions:set_parameter_compliance_mode(options, mode) end

--- Sets the compliance mode that should be used when parsing rfc2047 encoded words.
--- 
--- In general, you'll probably want this value to be #GMIME_RFC_COMPLIANCE_LOOSE
--- (the default) as it allows maximum interoperability with existing (broken) mail clients
--- and other mail software such as sloppily written perl scripts (aka spambots).
--- 
--- Note: Even in #GMIME_RFC_COMPLIANCE_STRICT mode, the parameter parser is fairly liberal
--- in what it accepts. Setting it to #GMIME_RFC_COMPLIANCE_LOOSE just makes it try harder
--- to deal with garbage input.
--- @param options GMime.ParserOptions a #GMimeParserOptions
--- @param mode GMime.RfcComplianceMode a #GMimeRfcComplianceMode
function GMime.ParserOptions:set_rfc2047_compliance_mode(options, mode) end

--- Gets the default parser options.
--- @return GMime.ParserOptions
function GMime.ParserOptions.get_default() end

--- Creates a new #GMimePartIter for iterating over @toplevel's subparts.
--- @param toplevel GMime.Object a #GMimeObject to use as the toplevel
--- @return GMime.PartIter
function GMime.PartIter.new(toplevel) end

--- Clones the @iter, including its current state.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return GMime.PartIter
function GMime.PartIter:clone(iter) end

--- Frees the memory allocated by g_mime_part_iter_new().
--- @param iter GMime.PartIter a #GMimePartIter
function GMime.PartIter:free(iter) end

--- Gets the #GMimeObject at the current #GMimePartIter position.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return GMime.Object
function GMime.PartIter:get_current(iter) end

--- Gets the parent of the #GMimeObject at the current #GMimePartIter
--- position.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return GMime.Object
function GMime.PartIter:get_parent(iter) end

--- Gets the path of the current #GMimeObject in the MIME structure
--- used to initialize @iter.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return string
function GMime.PartIter:get_path(iter) end

--- Gets the toplevel #GMimeObject used to initialize @iter.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return GMime.Object
function GMime.PartIter:get_toplevel(iter) end

--- Checks that the current state of @iter is valid.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return boolean
function GMime.PartIter:is_valid(iter) end

--- Updates the state of @iter to point to the #GMimeObject specified
--- by @path.
--- @param iter GMime.PartIter a #GMimePartIter
--- @param path string a string representing the path to jump to
--- @return boolean
function GMime.PartIter:jump_to(iter, path) end

--- Advances to the next part in the MIME structure used to initialize
--- @iter.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return boolean
function GMime.PartIter:next(iter) end

--- Rewinds to the previous part in the MIME structure used to
--- initialize @iter.
--- @param iter GMime.PartIter a #GMimePartIter
--- @return boolean
function GMime.PartIter:prev(iter) end

--- Removes the #GMimeObject at the current position from its
--- parent. If successful, @iter is advanced to the next position
--- (since the current position will become invalid).
--- @param iter GMime.PartIter a #GMimePartIter
--- @return boolean
function GMime.PartIter:remove(iter) end

--- Replaces the #GMimeObject at the current position with @replacement.
--- @param iter GMime.PartIter a #GMimePartIter
--- @param replacement GMime.Object a #GMimeObject
--- @return boolean
function GMime.PartIter:replace(iter, replacement) end

--- Resets the state of @iter to its initial state.
--- @param iter GMime.PartIter a #GMimePartIter
function GMime.PartIter:reset(iter) end

--- Creates a new #GMimeReferences.
--- @return GMime.References
function GMime.References.new() end

--- Appends a reference to msgid to the list of references.
--- @param refs GMime.References a #GMimeReferences
--- @param msgid string a message-id string
function GMime.References:append(refs, msgid) end

--- Clears the #GMimeReferences list.
--- @param refs GMime.References a #GMimeReferences
function GMime.References:clear(refs) end

--- Copies a #GMimeReferences list.
--- @param refs GMime.References the list of references to copy
--- @return GMime.References
function GMime.References:copy(refs) end

--- Frees the #GMimeReferences list.
--- @param refs GMime.References a #GMimeReferences list
function GMime.References:free(refs) end

--- Gets the specified Message-Id reference from the #GMimeReferences.
--- @param refs GMime.References a #GMimeReferences
--- @param index number the index of the message id
--- @return string
function GMime.References:get_message_id(refs, index) end

--- Gets the length of the #GMimeReferences list.
--- @param refs GMime.References a #GMimeReferences
--- @return number
function GMime.References:length(refs) end

--- Sets the specified Message-Id reference from the #GMimeReferences.
--- @param refs GMime.References a #GMimeReferences
--- @param index number the index of the message id
--- @param msgid string the message id
function GMime.References:set_message_id(refs, index, msgid) end

--- Decodes a list of msg-ids as in the References and/or In-Reply-To
--- headers defined in rfc822.
--- @param options GMime.ParserOptions? a #GMimeParserOptions or nil
--- @param text string string containing a list of msg-ids
--- @return GMime.References
function GMime.References.parse(options, text) end

GMime.BINARY_AGE = 213
GMime.DISPOSITION_ATTACHMENT = "attachment"
GMime.DISPOSITION_INLINE = "inline"
GMime.FILTER_ENRICHED_IS_RICHTEXT = 1
GMime.FILTER_HTML_BLOCKQUOTE_CITATION = 256
GMime.FILTER_HTML_CITE = 128
GMime.FILTER_HTML_CONVERT_ADDRESSES = 32
GMime.FILTER_HTML_CONVERT_NL = 2
GMime.FILTER_HTML_CONVERT_SPACES = 4
GMime.FILTER_HTML_CONVERT_URLS = 8
GMime.FILTER_HTML_ESCAPE_8BIT = 64
GMime.FILTER_HTML_MARK_CITATION = 16
GMime.FILTER_HTML_PRE = 1
GMime.INTERFACE_AGE = 0
GMime.MAJOR_VERSION = 3
GMime.MICRO_VERSION = 13
GMime.MINOR_VERSION = 2
GMime.SIGNATURE_STATUS_ERROR_MASK = "-8"
GMime.UUDECODE_STATE_BEGIN = 65536
GMime.UUDECODE_STATE_END = 131072
GMime.UUDECODE_STATE_INIT = 0
GMime.UUDECODE_STATE_MASK = 0
GMime.YDECODE_STATE_BEGIN = 4096
GMime.YDECODE_STATE_DECODE = 16384
GMime.YDECODE_STATE_END = 32768
GMime.YDECODE_STATE_EOLN = 256
GMime.YDECODE_STATE_ESCAPE = 512
GMime.YDECODE_STATE_INIT = 0
GMime.YDECODE_STATE_PART = 8192
GMime.YENCODE_CRC_INIT = "-1"
GMime.YENCODE_STATE_INIT = 0
return GMime

